{"mappings":"A,I,E,A,C,E,C,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SC8FA,EAzFwB,KACtB,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,AAAC,IACjB,IAAM,EAAW,KAAK,KAAK,CAAC,EAAI,YAAY,EACtC,EAAW,EAAE,CAEnB,GAAI,EAAI,WAAW,CAAC,QAAQ,CAAC,SAAW,CAAC,EAAI,QAAQ,CAAC,QAAQ,CAAC,UAG7D,EAAS,IAAI,CAFG,GAIhB,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,eAAgB,CACd,IAAK,AANO,EAMC,EAAE,CAAC,QAAQ,GACxB,KAAM,AAPM,EAOE,IAAI,CAAC,QAAQ,IAAM,MACjC,SAAU,MACV,UAAW,WAAW,AATV,EASkB,KAAK,GAAK,EACxC,SAAU,SAAS,AAVP,EAUe,GAAG,GAAK,EACnC,SAAU,KACZ,CACF,QACK,GAAI,EAAI,WAAW,CAAC,QAAQ,CAAC,4BAA6B,CAC/D,IAAM,EAAU,EAAS,KAAK,CAExB,EAAc,EACjB,MAAM,CAAC,AAAC,IACN,EAAQ,QAAQ,CAAC,EACpB,GACC,MAAM,CACL,EAAQ,MAAM,CAAC,AAAC,IACb,EAAS,QAAQ,CAAC,EACrB,IAGJ,GAAI,CACF,IAAK,IAAI,EAAI,EAAY,MAAM,CAAE,EAAI,EAAG,IACtC,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,oBAAqB,CACnB,IAAK,CAAW,CAAC,EAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,GACnC,KAAM,CAAW,CAAC,EAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAM,MAC5C,SAAU,MACV,UAAW,WAAW,CAAW,CAAC,EAAI,EAAE,CAAC,KAAK,GAAK,EACnD,SAAU,SAAS,CAAW,CAAC,EAAI,EAAE,CAAC,GAAG,GAAK,EAC9C,SAAU,KACZ,CACF,GAEA,EAAY,MAAM,EAAI,CAExB,CAAA,EAAY,MAAM,CAAG,CACvB,CAAE,MAAA,EAAM,CACN,MACF,CACF,MAAO,GAAI,EAAI,WAAW,CAAC,QAAQ,CAAC,UAClC,GAAI,CAEF,IAAM,EAAW,AADG,EACS,QAAQ,CAErC,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,iBAAkB,CAChB,GAAI,AALY,EAKA,EAAE,CAAC,QAAQ,GAC3B,MAAO,WAAW,AANF,EAMc,KAAK,EACnC,IAAK,WAAW,AAPA,EAOY,GAAG,GAAK,EACpC,SAAU,WAAW,AARL,EAQiB,YAAY,GAAK,EAClD,KAAM,MACN,MAAO,MACP,QAAS,MACT,SAAU,MACV,MAAO,EAAS,GAAG,CAAC,AAAC,IACnB,GAAM,CAAA,QAAE,CAAO,CAAA,UAAE,CAAS,CAAA,cAAE,CAAa,CAAA,MAAE,CAAK,CAAA,SAAE,CAAQ,CAAE,CAAG,EAC/D,MAAO,CACL,QAAS,AAhBG,EAgBS,EAAE,CAAC,QAAQ,GAChC,UAAW,EAAQ,QAAQ,GAC3B,IAAK,EAAQ,QAAQ,GACrB,KAAO,AAAA,CAAA,GAAa,KAAA,EAAO,QAAQ,GACnC,SAAW,AAAA,CAAA,GAAiB,KAAA,EAAO,QAAQ,GAC3C,UAAW,WAAW,GAAS,GAC/B,SAAU,SAAS,GAAY,GAC/B,SAAU,KACZ,CACF,EACF,CACF,EACF,CAAE,MAAO,EAAG,CAEZ,CAEJ,EACF,C","sources":["<anon>","src/shared/environment-data-sources/buddi.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3NNNW\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $de8e0218fdc018c5$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\nconst $de8e0218fdc018c5$var$buddiDataSource = ()=>{\n    (0, $eU8cG.xhrResponseSource)((xhr)=>{\n        const response = JSON.parse(xhr.responseText);\n        const cartList = [];\n        if (xhr.responseURL.includes(\"cart\") && !xhr.response.includes(\"delete\")) {\n            const product = response;\n            cartList.push(product);\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: product.id.toString(),\n                    name: product.name.toString() || \"N/A\",\n                    category: \"N/A\",\n                    unitPrice: parseFloat(product.price) || 0,\n                    quantity: parseInt(product.qty) || 1,\n                    currency: \"USD\"\n                }\n            });\n        } else if (xhr.responseURL.includes(\"delete-product-from-cart\")) {\n            const product = response.items;\n            const removedItem = cartList.filter((x)=>{\n                product.includes(x);\n            }).concat(product.filter((x)=>{\n                cartList.includes(x);\n            }));\n            try {\n                for(let i = removedItem.length; i > 0; i--){\n                    (0, $2hYdk.default).notify({\n                        removeFromCartEvent: {\n                            sku: removedItem[i - 1].id.toString(),\n                            name: removedItem[i - 1].name.toString() || \"N/A\",\n                            category: \"N/A\",\n                            unitPrice: parseFloat(removedItem[i - 1].price) || 0,\n                            quantity: parseInt(removedItem[i - 1].qty) || 1,\n                            currency: \"USD\"\n                        }\n                    });\n                    removedItem.length -= 1;\n                }\n                removedItem.length = 0;\n            } catch (e) {\n                return;\n            }\n        } else if (xhr.responseURL.includes(\"orders\")) try {\n            const transaction = response;\n            const products = transaction.products;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: transaction.id.toString(),\n                    total: parseFloat(transaction.total),\n                    tax: parseFloat(transaction.tax) || 0,\n                    shipping: parseFloat(transaction.delivery_fee) || 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = product;\n                        return {\n                            orderId: transaction.id.toString(),\n                            productId: item_id.toString(),\n                            sku: item_id.toString(),\n                            name: (item_name || \"N/A\").toString(),\n                            category: (item_category || \"N/A\").toString(),\n                            unitPrice: parseFloat(price || 0),\n                            quantity: parseInt(quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        } catch (e) {\n        // window.tracker(\"trackError\", JSON.stringify(e), \"BUDDI\");\n        }\n    });\n};\nvar $de8e0218fdc018c5$export$2e2bcd8739ae039 = $de8e0218fdc018c5$var$buddiDataSource;\n\n});\n\n})();\n//# sourceMappingURL=buddi.64a75f07.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { TransactionCartItem } from \"../types\";\n\nconst buddiDataSource = (): void => {\n  xhrResponseSource((xhr: XMLHttpRequest): void => {\n    const response = JSON.parse(xhr.responseText);\n    const cartList = [];\n\n    if (xhr.responseURL.includes(\"cart\") && !xhr.response.includes(\"delete\")) {\n      const product = response;\n\n      cartList.push(product);\n\n      observable.notify({\n        addToCartEvent: {\n          sku: product.id.toString(),\n          name: product.name.toString() || \"N/A\",\n          category: \"N/A\",\n          unitPrice: parseFloat(product.price) || 0,\n          quantity: parseInt(product.qty) || 1,\n          currency: \"USD\",\n        },\n      });\n    } else if (xhr.responseURL.includes(\"delete-product-from-cart\")) {\n      const product = response.items;\n\n      const removedItem = cartList\n        .filter((x) => {\n          !product.includes(x);\n        })\n        .concat(\n          product.filter((x) => {\n            !cartList.includes(x);\n          })\n        );\n\n      try {\n        for (let i = removedItem.length; i > 0; i--) {\n          observable.notify({\n            removeFromCartEvent: {\n              sku: removedItem[i - 1].id.toString(),\n              name: removedItem[i - 1].name.toString() || \"N/A\",\n              category: \"N/A\",\n              unitPrice: parseFloat(removedItem[i - 1].price) || 0,\n              quantity: parseInt(removedItem[i - 1].qty) || 1,\n              currency: \"USD\",\n            },\n          });\n\n          removedItem.length -= 1;\n        }\n        removedItem.length = 0;\n      } catch {\n        return;\n      }\n    } else if (xhr.responseURL.includes(\"orders\")) {\n      try {\n        const transaction = response;\n        const products = transaction.products;\n\n        observable.notify({\n          transactionEvent: {\n            id: transaction.id.toString(),\n            total: parseFloat(transaction.total),\n            tax: parseFloat(transaction.tax) || 0,\n            shipping: parseFloat(transaction.delivery_fee) || 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            items: products.map((product) => {\n              const { item_id, item_name, item_category, price, quantity } = product;\n              return {\n                orderId: transaction.id.toString(),\n                productId: item_id.toString(),\n                sku: item_id.toString(),\n                name: (item_name || \"N/A\").toString(),\n                category: (item_category || \"N/A\").toString(),\n                unitPrice: parseFloat(price || 0),\n                quantity: parseInt(quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (e) {\n        // window.tracker(\"trackError\", JSON.stringify(e), \"BUDDI\");\n      }\n    }\n  });\n};\n\nexport default buddiDataSource;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$de8e0218fdc018c5$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$eU8cG","xhrResponseSource","xhr","response","JSON","parse","responseText","cartList","responseURL","includes","push","default","notify","addToCartEvent","sku","product","id","toString","name","category","unitPrice","parseFloat","price","quantity","parseInt","qty","currency","items","removedItem","filter","x","concat","i","length","removeFromCartEvent","e","products","transaction","transactionEvent","total","tax","shipping","delivery_fee","city","state","country","map","item_id","item_name","item_category","orderId","productId"],"version":3,"file":"buddi.64a75f07.js.map"}