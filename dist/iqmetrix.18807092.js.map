{"mappings":"A,I,E,A,C,E,C,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SC4CA,EAvC2B,KACvB,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,AAAC,IACf,IAAM,EAAW,EAAI,YAAY,CACjC,GAAI,CACA,IAAM,EAAc,KAAK,KAAK,CAAC,GAC/B,GAAI,EAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAY,CAElD,IAAM,EAAU,EAAY,IAAI,CAAC,cAAc,CAE/C,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CACd,iBAAkB,CACd,GAAI,EAAY,IAAI,CAAC,cAAc,CAAC,QAAQ,GAC5C,KAAM,MACN,QAAS,MACT,SAAU,MACV,SAAU,WAAW,EAAY,IAAI,CAAC,cAAc,GAAK,EACzD,MAAO,MACP,IAAK,WAAW,EAAY,IAAI,CAAC,GAAG,GAAK,EACzC,MAAO,WAAW,EAAY,IAAI,CAAC,UAAU,GAAK,EAClD,MAAO,EAAQ,GAAG,CAAC,AAAC,GACT,CAAA,CACH,QAAS,EAAY,IAAI,CAAC,cAAc,CAAC,QAAQ,GACjD,SAAU,MACV,SAAU,MACV,KAAM,EAAK,WAAW,CAAC,QAAQ,GAC/B,SAAU,SAAS,EAAK,cAAc,EACtC,IAAK,EAAK,EAAE,CAAC,QAAQ,GACrB,UAAW,WAAW,EAAK,KAAK,CACpC,CAAA,EAER,CACJ,EACJ,CACJ,CAAE,MAAO,EAAO,CAEhB,CACJ,EACJ,C","sources":["<anon>","src/shared/environment-data-sources/iqmetrix.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"aB3cV\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $5e63ae7a30a41a5a$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\nconst $5e63ae7a30a41a5a$var$iqmetrixDataSource = ()=>{\n    (0, $eU8cG.xhrResponseSource)((xhr)=>{\n        const response = xhr.responseText;\n        try {\n            const transaction = JSON.parse(response);\n            if (transaction.data.orderStatus.includes(\"Ordered\")) {\n                const product = transaction.data.productDetails;\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        id: transaction.data.orderDisplayId.toString(),\n                        city: \"N/A\",\n                        country: \"USA\",\n                        currency: \"USD\",\n                        shipping: parseFloat(transaction.data.deliveryCharge) || 0,\n                        state: \"N/A\",\n                        tax: parseFloat(transaction.data.tax) || 0,\n                        total: parseFloat(transaction.data.grandTotal) || 0,\n                        items: product.map((item)=>{\n                            return {\n                                orderId: transaction.data.orderDisplayId.toString(),\n                                category: \"N/A\",\n                                currency: \"USD\",\n                                name: item.productName.toString(),\n                                quantity: parseInt(item.selectQuantity),\n                                sku: item.Id.toString(),\n                                unitPrice: parseFloat(item.price)\n                            };\n                        })\n                    }\n                });\n            }\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'IQMETRIX');\n        }\n    });\n};\nvar $5e63ae7a30a41a5a$export$2e2bcd8739ae039 = $5e63ae7a30a41a5a$var$iqmetrixDataSource;\n\n});\n\n})();\n//# sourceMappingURL=iqmetrix.18807092.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { TransactionCartItem } from \"../types\";\n\nconst iqmetrixDataSource = () => {\n    xhrResponseSource((xhr: XMLHttpRequest) => {\n        const response = xhr.responseText;\n        try {\n            const transaction = JSON.parse(response);\n            if (transaction.data.orderStatus.includes(\"Ordered\")) {\n\n                const product = transaction.data.productDetails;\n\n                observable.notify({\n                    transactionEvent: {\n                        id: transaction.data.orderDisplayId.toString(),\n                        city: \"N/A\",\n                        country: \"USA\",\n                        currency: \"USD\",\n                        shipping: parseFloat(transaction.data.deliveryCharge) || 0,\n                        state: \"N/A\",\n                        tax: parseFloat(transaction.data.tax) || 0,\n                        total: parseFloat(transaction.data.grandTotal) || 0,\n                        items: product.map((item: any) => {\n                            return {\n                                orderId: transaction.data.orderDisplayId.toString(),\n                                category: \"N/A\",\n                                currency: \"USD\",\n                                name: item.productName.toString(),\n                                quantity: parseInt(item.selectQuantity),\n                                sku: item.Id.toString(),\n                                unitPrice: parseFloat(item.price),\n                            } as TransactionCartItem;\n                        }),\n                    },\n                });\n            }\n        } catch (error) {\n            // window.tracker('trackError', JSON.stringify(error), 'IQMETRIX');\n        }\n    });\n};\n\nexport default iqmetrixDataSource;"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$5e63ae7a30a41a5a$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$eU8cG","xhrResponseSource","xhr","response","responseText","transaction","JSON","parse","data","orderStatus","includes","product","productDetails","default","notify","transactionEvent","id","orderDisplayId","toString","city","country","currency","shipping","parseFloat","deliveryCharge","state","tax","total","grandTotal","items","map","item","orderId","category","name","productName","quantity","parseInt","selectQuantity","sku","Id","unitPrice","price","error"],"version":3,"file":"iqmetrix.18807092.js.map"}