{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/dutchie-subdomain.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4IGTl\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $d29db2ac74f966ae$export$2e2bcd8739ae039; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n// TODO: Create wrapper for handling multiple data sources configurations\nconst $d29db2ac74f966ae$var$dutchieSubdomainDataSource = ()=>{\n    (0, $3tZSl.datalayerSource)((data)=>{\n        (0, $lwczO.default).debug(\"Dutchie Subdomain Data Source Events: \", {\n            data: data\n        });\n        if (data.event === \"add_to_cart\") {\n            const products = data.ecommerce.items;\n            const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: item_id.toString(),\n                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                    unitPrice: parseFloat(price || \"0\"),\n                    quantity: parseInt(quantity || \"1\"),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (data.event === \"remove_from_cart\") {\n            const products = data.ecommerce.items;\n            const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: item_id.toString(),\n                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                    unitPrice: parseFloat(price || \"0\"),\n                    quantity: parseInt(quantity || \"1\"),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (data[\"0\"] === \"event\" && data[\"1\"] === \"purchase\") {\n            const transaction = data[\"2\"];\n            const products = transaction.items;\n            const { transaction_id: transaction_id, value: value } = transaction;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    total: parseFloat(value),\n                    id: transaction_id.toString(),\n                    tax: 0,\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        var _product_item_name, _product_item_category;\n                        return {\n                            orderId: transaction_id.toString(),\n                            sku: product.item_id.toString(),\n                            name: ((_product_item_name = product.item_name) === null || _product_item_name === void 0 ? void 0 : _product_item_name.toString()) || \"N/A\",\n                            category: ((_product_item_category = product.item_category) === null || _product_item_category === void 0 ? void 0 : _product_item_category.toString()) || \"N/A\",\n                            unitPrice: parseFloat(product.price || \"0\"),\n                            quantity: parseInt(product.quantity || \"1\"),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        }\n        if (data.event === \"purchase\") {\n            (0, $lwczO.default).info(\"Dutchie Transaction Event, Data Source: \", {\n                data: data\n            });\n            const transaction = data.ecommerce;\n            const products = transaction.items;\n            const { transaction_id: transaction_id, value: value } = transaction;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    total: parseFloat(value),\n                    id: transaction_id.toString(),\n                    tax: 0,\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        var _product_item_name, _product_item_category;\n                        return {\n                            orderId: transaction_id.toString(),\n                            sku: product.item_id.toString(),\n                            name: ((_product_item_name = product.item_name) === null || _product_item_name === void 0 ? void 0 : _product_item_name.toString()) || \"N/A\",\n                            category: ((_product_item_category = product.item_category) === null || _product_item_category === void 0 ? void 0 : _product_item_category.toString()) || \"N/A\",\n                            unitPrice: parseFloat(product.price || \"0\"),\n                            quantity: parseInt(product.quantity || \"1\"),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        }\n        if (data.event === \"LB_Purchase\") {\n            (0, $lwczO.default).info(\"Dutchie Transaction Event, Data Source: \", {\n                data: data\n            });\n            const products = data.items;\n            const { transaction_id: transaction_id, transaction_total: transaction_total, transaction_tax: transaction_tax } = data;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    total: parseFloat(transaction_total),\n                    id: transaction_id.toString(),\n                    tax: transaction_tax === \"N/A\" || isNaN(transaction_tax) ? 0 : parseFloat(transaction_tax),\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        var _product_item_name, _product_item_category;\n                        return {\n                            orderId: transaction_id.toString(),\n                            sku: product.item_id.toString(),\n                            name: ((_product_item_name = product.item_name) === null || _product_item_name === void 0 ? void 0 : _product_item_name.toString()) || \"N/A\",\n                            category: ((_product_item_category = product.item_category) === null || _product_item_category === void 0 ? void 0 : _product_item_category.toString()) || \"N/A\",\n                            unitPrice: parseFloat(product.item_price || 0),\n                            quantity: parseInt(product.quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        }\n    });\n};\nvar $d29db2ac74f966ae$export$2e2bcd8739ae039 = $d29db2ac74f966ae$var$dutchieSubdomainDataSource;\n\n});\n\n})();\n//# sourceMappingURL=dutchie-subdomain.3f910997.js.map\n","import logger from 'src/shared/logger';\nimport observable from 'src/shared/utils/create-events-observable';\n\nimport { datalayerSource } from '../sources/google-datalayer-source';\nimport { TransactionCartItem } from '../types';\n\n// TODO: Create wrapper for handling multiple data sources configurations\nconst dutchieSubdomainDataSource = () => {\n  datalayerSource((data) => {\n    logger.debug(\"Dutchie Subdomain Data Source Events: \", { data });\n\n    if (data.event === \"add_to_cart\") {\n      const products = data.ecommerce.items;\n      const { item_id, item_name, item_category, price, quantity } = products[0];\n\n      observable.notify({\n        addToCartEvent: {\n          sku: item_id.toString(),\n          name: item_name?.toString() || \"N/A\",\n          category: item_category?.toString() || \"N/A\",\n          unitPrice: parseFloat(price || \"0\"),\n          quantity: parseInt(quantity || \"1\"),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (data.event === \"remove_from_cart\") {\n      const products = data.ecommerce.items;\n      const { item_id, item_name, item_category, price, quantity } = products[0];\n\n      observable.notify({\n        removeFromCartEvent: {\n          sku: item_id.toString(),\n          name: item_name?.toString() || \"N/A\",\n          category: item_category?.toString() || \"N/A\",\n          unitPrice: parseFloat(price || \"0\"),\n          quantity: parseInt(quantity || \"1\"),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (data[\"0\"] === \"event\" && data[\"1\"] === \"purchase\") {\n      const transaction = data[\"2\"];\n      const products = transaction.items;\n      const { transaction_id, value } = transaction;\n\n      observable.notify({\n        transactionEvent: {\n          total: parseFloat(value),\n          id: transaction_id.toString(),\n          tax: 0,\n          shipping: 0,\n          city: \"N/A\",\n          state: \"N/A\",\n          country: \"N/A\",\n          currency: \"USD\",\n          items: products.map((product) => {\n            return {\n              orderId: transaction_id.toString(),\n              sku: product.item_id.toString(),\n              name: product.item_name?.toString() || \"N/A\",\n              category: product.item_category?.toString() || \"N/A\",\n              unitPrice: parseFloat(product.price || \"0\"),\n              quantity: parseInt(product.quantity || \"1\"),\n              currency: \"USD\",\n            } as TransactionCartItem;\n          }),\n        },\n      });\n    }\n    if (data.event === \"purchase\") {\n      logger.info(\"Dutchie Transaction Event, Data Source: \", { data });\n\n      const transaction = data.ecommerce;\n      const products = transaction.items;\n      const { transaction_id, value } = transaction;\n\n      observable.notify({\n        transactionEvent: {\n          total: parseFloat(value),\n          id: transaction_id.toString(),\n          tax: 0,\n          shipping: 0,\n          city: \"N/A\",\n          state: \"N/A\",\n          country: \"N/A\",\n          currency: \"USD\",\n          items: products.map((product) => {\n            return {\n              orderId: transaction_id.toString(),\n              sku: product.item_id.toString(),\n              name: product.item_name?.toString() || \"N/A\",\n              category: product.item_category?.toString() || \"N/A\",\n              unitPrice: parseFloat(product.price || \"0\"),\n              quantity: parseInt(product.quantity || \"1\"),\n              currency: \"USD\",\n            } as TransactionCartItem;\n          }),\n        },\n      });\n    }\n\n    if (data.event === \"LB_Purchase\") {\n      logger.info(\"Dutchie Transaction Event, Data Source: \", { data });\n\n      const products = data.items;\n      const { transaction_id, transaction_total, transaction_tax } = data;\n\n      observable.notify({\n        transactionEvent: {\n          total: parseFloat(transaction_total),\n          id: transaction_id.toString(),\n          tax: transaction_tax === \"N/A\" || isNaN(transaction_tax) ? 0 : parseFloat(transaction_tax),\n          shipping: 0,\n          city: \"N/A\",\n          state: \"N/A\",\n          country: \"N/A\",\n          currency: \"USD\",\n          items: products.map((product) => {\n            return {\n              orderId: transaction_id.toString(),\n              sku: product.item_id.toString(),\n              name: product.item_name?.toString() || \"N/A\",\n              category: product.item_category?.toString() || \"N/A\",\n              unitPrice: parseFloat(product.item_price || 0),\n              quantity: parseInt(product.quantity || 1),\n              currency: \"USD\",\n            } as TransactionCartItem;\n          }),\n        },\n      });\n    }\n  });\n};\n\nexport default dutchieSubdomainDataSource;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$d29db2ac74f966ae$export$2e2bcd8739ae039","set","s","enumerable","configurable","$lwczO","$2hYdk","$3tZSl","datalayerSource","data","default","debug","event","item_id","item_name","item_category","price","quantity","products","ecommerce","items","notify","addToCartEvent","sku","toString","name","category","unitPrice","parseFloat","parseInt","currency","removeFromCartEvent","transaction","transaction_id","value","transactionEvent","total","id","tax","shipping","city","state","country","map","product","_product_item_name","_product_item_category","orderId","info","transaction_total","transaction_tax","isNaN","item_price"],"version":3,"file":"dutchie-subdomain.3f910997.js.map"}