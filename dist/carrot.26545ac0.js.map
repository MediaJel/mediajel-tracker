{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/carrot.ts","src/shared/sources/utils/is-tracker-loaded.ts","src/shared/utils/adapter-handler.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fRKTS\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $fb80c68759f282d6$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $kDidw = parcelRequire(\"kDidw\");\n\nvar $apXfG = parcelRequire(\"apXfG\");\n\nvar $lSX0J = parcelRequire(\"lSX0J\");\n\nvar $lwczO = parcelRequire(\"lwczO\");\nconst $fb80c68759f282d6$var$carrotDataSource = (snowplow)=>{\n    const handler = (0, $lSX0J.multiAdapterHandler)(snowplow);\n    handler.add(\"Fetch Response Source\", ()=>{\n        (0, $apXfG.fetchSource)((request)=>{}, (response, responseBody)=>{\n            var _responseBody_orders;\n            if (!window.location.href.includes(\"/store/activity\")) return;\n            if (!responseBody) return;\n            responseBody === null || responseBody === void 0 ? void 0 : (_responseBody_orders = responseBody.orders) === null || _responseBody_orders === void 0 ? void 0 : _responseBody_orders.forEach((order)=>{\n                var _order_details;\n                if ((order === null || order === void 0 ? void 0 : (_order_details = order.details) === null || _order_details === void 0 ? void 0 : _order_details.status) === \"open\") {\n                    const data = order;\n                    try {\n                        (0, $kDidw.isTrackerLoaded)(()=>{\n                            (0, $2hYdk.default).notify({\n                                transactionEvent: {\n                                    id: data.details.id || \"N/A\",\n                                    total: parseFloat(data.details.total || 0),\n                                    tax: parseFloat(data.details.tax || 0),\n                                    shipping: 0,\n                                    city: \"N/A\",\n                                    state: \"N/A\",\n                                    country: \"USA\",\n                                    currency: \"USD\",\n                                    items: data.items.map((item)=>{\n                                        return {\n                                            orderId: data.details.id || \"N/A\",\n                                            sku: item.product.id.toString() || \"N/A\",\n                                            name: (item.product.name || \"N/A\").toString(),\n                                            category: (item.product.categoryName || \"N/A\").toString(),\n                                            unitPrice: parseFloat(item.price) || 0,\n                                            quantity: parseInt(item.unitQty) || 1,\n                                            currency: \"USD\"\n                                        };\n                                    }) || []\n                                }\n                            });\n                        });\n                    } catch (error) {\n                        (0, $lwczO.default).error(\"Carrot: Error parsing response body\", error);\n                    }\n                }\n            });\n        });\n    });\n    handler.execute();\n};\nvar $fb80c68759f282d6$export$2e2bcd8739ae039 = $fb80c68759f282d6$var$carrotDataSource;\n\n});\nparcelRegister(\"kDidw\", function(module, exports) {\n\n$parcel$export(module.exports, \"isTrackerLoaded\", function () { return $d28923ed48da6cba$export$ab4cf8abbc961f2a; });\nconst $d28923ed48da6cba$export$ab4cf8abbc961f2a = (callback)=>{\n    if (window.tracker) callback();\n    else {\n        let trackerLoaded = false;\n        const intervalId = setInterval(()=>{\n            if (window.tracker && !trackerLoaded) {\n                trackerLoaded = true;\n                clearInterval(intervalId);\n                callback();\n            }\n        }, 100);\n    }\n};\n\n});\n\nparcelRegister(\"lSX0J\", function(module, exports) {\n\n$parcel$export(module.exports, \"multiAdapterHandler\", function () { return $126ed817d3cdab1d$export$606da16facbf2a29; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $126ed817d3cdab1d$export$a2b49bbac3f322 = (snowplow)=>{\n    const snowplowContext = snowplow.context.appId;\n    let successLogged = false;\n    const fns = [];\n    function isUnique(name) {\n        return fns.findIndex((fn)=>fn.name === name) === -1;\n    }\n    return {\n        add: (name, fn)=>{\n            (0, $lwczO.default).info(`Adding ${name} to the adapter handler...`);\n            fns.push({\n                name: name,\n                fn: fn\n            });\n        },\n        execute: ()=>{\n            (0, $lwczO.default).info(`Executing adapter handler...`);\n            for (const { name: name, fn: fn } of fns){\n                let success = false;\n                (0, $2hYdk.default).subscribe((event)=>{\n                    if (event.transactionEvent) success = true;\n                });\n                try {\n                    (0, $lwczO.default).info(`Attempting transaction with ${name}`);\n                    fn();\n                    if (success) {\n                        successLogged = true;\n                        (0, $lwczO.default).info(`Transaction successful with ${name}`);\n                        return;\n                    }\n                } catch (error) {\n                    (0, $lwczO.default).error(`Transaction Failed with ${name}`, error);\n                }\n            }\n            if (!successLogged) (0, $lwczO.default).error(\"All transaction attempts failed for the adapter.\");\n        }\n    };\n};\nconst $126ed817d3cdab1d$export$606da16facbf2a29 = (()=>{\n    let instance = null;\n    return (snowplow)=>{\n        if (!instance) instance = $126ed817d3cdab1d$export$a2b49bbac3f322(snowplow);\n        return instance;\n    };\n})();\n\n});\n\n\n})();\n//# sourceMappingURL=carrot.26545ac0.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\nimport { isTrackerLoaded } from \"../sources/utils/is-tracker-loaded\";\nimport { TransactionCartItem } from \"../types\";\nimport { fetchSource } from \"../sources/fetch-source\";\nimport { multiAdapterHandler } from \"../utils/adapter-handler\";\nimport { SnowplowTracker } from \"../snowplow/types\";\nimport logger from \"src/shared/logger\";\n\nconst carrotDataSource = (snowplow: SnowplowTracker) => {\n  const handler = multiAdapterHandler(snowplow);\n\n  handler.add(\"Fetch Response Source\", () => {\n    fetchSource(\n      (request) => {},\n      (response, responseBody) => {\n        if (!window.location.href.includes(\"/store/activity\")) return;\n        if (!responseBody) return;\n\n        responseBody?.orders?.forEach((order) => {\n          if (order?.details?.status === \"open\") {\n            const data = order;\n            try {\n              isTrackerLoaded(() => {\n                observable.notify({\n                  transactionEvent: {\n                    id: data.details.id || \"N/A\",\n                    total: parseFloat(data.details.total || 0),\n                    tax: parseFloat(data.details.tax || 0),\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items:\n                      data.items.map((item) => {\n                        return {\n                          orderId: data.details.id || \"N/A\",\n                          sku: item.product.id.toString() || \"N/A\",\n                          name: (item.product.name || \"N/A\").toString(),\n                          category: (item.product.categoryName || \"N/A\").toString(),\n                          unitPrice: parseFloat(item.price) || 0,\n                          quantity: parseInt(item.unitQty) || 1,\n                          currency: \"USD\",\n                        } as TransactionCartItem;\n                      }) || [],\n                  },\n                });\n              });\n            } catch (error) {\n              logger.error(\"Carrot: Error parsing response body\", error);\n            }\n          }\n        });\n      },\n    );\n  });\n  handler.execute();\n};\n\nexport default carrotDataSource;\n","export const isTrackerLoaded = (callback: () => void): void => {\n  if (window.tracker) {\n    callback();\n  } else {\n    let trackerLoaded = false;\n    const intervalId = setInterval(() => {\n      if (window.tracker && !trackerLoaded) {\n        trackerLoaded = true;\n        clearInterval(intervalId);\n        callback();\n      }\n    }, 100);\n  }\n};\n","import logger from \"src/shared/logger\";\nimport observable from \"./create-events-observable\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\ntype HandlerFunction = () => void;\n\ninterface AdapterHandler {\n  add: (name: string, fn: HandlerFunction) => void;\n  execute: () => void;\n}\n\nexport const createAdapterHandler = (snowplow: SnowplowTracker) => {\n  const snowplowContext = snowplow.context.appId;\n  let successLogged = false;\n  const fns: Array<{ name: string; fn: HandlerFunction }> = [];\n\n  function isUnique(name: string) {\n    return fns.findIndex((fn) => fn.name === name) === -1;\n  }\n\n  return {\n    add: (name: string, fn: HandlerFunction) => {\n      logger.info(`Adding ${name} to the adapter handler...`);\n      fns.push({ name, fn });\n    },\n    execute: () => {\n      logger.info(`Executing adapter handler...`);\n\n      for (const { name, fn } of fns) {\n        let success = false;\n        observable.subscribe((event) => {\n          if (event.transactionEvent) success = true;\n        });\n\n        try {\n          logger.info(`Attempting transaction with ${name}`);\n          fn();\n\n          if (success) {\n            successLogged = true;\n            logger.info(`Transaction successful with ${name}`);\n            return;\n          }\n        } catch (error) {\n          logger.error(`Transaction Failed with ${name}`, error);\n        }\n      }\n\n\n      if (!successLogged) {\n        logger.error(\"All transaction attempts failed for the adapter.\");\n      }\n    },\n  } as AdapterHandler;\n};\n\nexport const multiAdapterHandler = (() => {\n  let instance: ReturnType<typeof createAdapterHandler> | null = null;\n  return (snowplow: SnowplowTracker) => {\n    if (!instance) {\n      instance = createAdapterHandler(snowplow);\n    }\n    return instance;\n  };\n})();\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$fb80c68759f282d6$export$2e2bcd8739ae039","$2hYdk","$kDidw","$apXfG","$lSX0J","$lwczO","snowplow","handler","multiAdapterHandler","add","fetchSource","request","response","responseBody","_responseBody_orders","location","href","includes","orders","forEach","order","_order_details","details","status","isTrackerLoaded","default","notify","transactionEvent","id","data","total","parseFloat","tax","shipping","city","state","country","currency","items","map","item","orderId","sku","product","toString","name","category","categoryName","unitPrice","price","quantity","parseInt","unitQty","error","execute","$d28923ed48da6cba$export$ab4cf8abbc961f2a","callback","tracker","trackerLoaded","intervalId","setInterval","clearInterval","instance","$126ed817d3cdab1d$export$606da16facbf2a29","$126ed817d3cdab1d$export$a2b49bbac3f322","context","appId","successLogged","fns","fn","info","push","success","subscribe","event"],"version":3,"file":"carrot.26545ac0.js.map"}