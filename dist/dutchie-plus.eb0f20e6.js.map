{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/dutchie-plus.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jPBao\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $bf8817691bed7f0e$export$2e2bcd8739ae039; });\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $bf8817691bed7f0e$var$dutchiePlusDataSource = ()=>{\n    // IMPORTANT NOTE: dutchieplus cart CURALEAF is Paid search only & greenvalleydispensary is display\n    window.dataLayer = window.dataLayer || [];\n    (0, $3tZSl.datalayerSource)((data)=>{\n        //* Works on Curaleaf\n        if (data.event === \"purchase\") (0, $2hYdk.default).notify({\n            transactionEvent: {\n                id: data.ecommerce.transaction_id,\n                total: parseFloat(data.ecommerce.value),\n                tax: parseFloat(data.ecommerce.tax || 0),\n                shipping: parseFloat(data.ecommerce.shipping || 0),\n                city: \"N/A\",\n                country: \"USA\",\n                currency: \"USD\",\n                state: \"N/A\",\n                items: data.ecommerce.items.map((item)=>{\n                    return {\n                        orderId: data.ecommerce.transaction_id,\n                        sku: item.item_id,\n                        name: item.item_name,\n                        category: item.item_category,\n                        unitPrice: parseFloat(item.price),\n                        quantity: parseInt(item.quantity),\n                        currency: \"USD\"\n                    };\n                })\n            }\n        });\n        if (data.event === \"add_to_cart\") {\n            const products = data.ecommerce.items;\n            const { item_id: item_id, item_name: item_name, item_category: item_category, full_price: full_price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: item_id.toString(),\n                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                    unitPrice: parseFloat(full_price || \"0\"),\n                    quantity: parseInt(quantity || \"1\"),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (data.event === \"remove_from_cart\") {\n            const products = data.ecommerce.items;\n            const { item_id: item_id, item_name: item_name, item_category: item_category, full_price: full_price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: item_id.toString(),\n                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                    unitPrice: parseFloat(full_price || \"0\"),\n                    quantity: parseInt(quantity || \"1\"),\n                    currency: \"USD\"\n                }\n            });\n        }\n    });\n    // if window.locatoin.href includes 'order-confirmation'\n    // if (!window.location.href.includes(\"order-confirmation\")) {\n    //   return;\n    // }\n    // loop through the dataLayer and find the purchase event\n    for(let i = 0; i < window.dataLayer.length; i++){\n        const data = window.dataLayer[i];\n        if (data.event === \"purchase\") {\n            var _data_ecommerce_purchase, _data_ecommerce, _data_ecommerce_purchase_actionField, _data_ecommerce_purchase1, _data_ecommerce1, _data_ecommerce_purchase_actionField1, _data_ecommerce_purchase2, _data_ecommerce2, _data_ecommerce_purchase_actionField2, _data_ecommerce_purchase3, _data_ecommerce3;\n            // const orderContent: HTMLDivElement | any = document.getElementsByClassName(\"order-content\")[0];\n            // const text: string = orderContent?.innerText;\n            // const regex = /#(\\d+)/;\n            // const orderNumber = text.match(regex)[1];\n            // if (localStorage.getItem(\"orderNumber\") === orderNumber) {\n            //   return;\n            // }\n            // // set order id to local storage to prevent duplicate events\n            // localStorage.setItem(\"orderNumber\", orderNumber);\n            const items = data === null || data === void 0 ? void 0 : (_data_ecommerce = data.ecommerce) === null || _data_ecommerce === void 0 ? void 0 : (_data_ecommerce_purchase = _data_ecommerce.purchase) === null || _data_ecommerce_purchase === void 0 ? void 0 : _data_ecommerce_purchase.products;\n            const getId = data === null || data === void 0 ? void 0 : (_data_ecommerce1 = data.ecommerce) === null || _data_ecommerce1 === void 0 ? void 0 : (_data_ecommerce_purchase1 = _data_ecommerce1.purchase) === null || _data_ecommerce_purchase1 === void 0 ? void 0 : (_data_ecommerce_purchase_actionField = _data_ecommerce_purchase1.actionField) === null || _data_ecommerce_purchase_actionField === void 0 ? void 0 : _data_ecommerce_purchase_actionField.id;\n            const getRevenue = data === null || data === void 0 ? void 0 : (_data_ecommerce2 = data.ecommerce) === null || _data_ecommerce2 === void 0 ? void 0 : (_data_ecommerce_purchase2 = _data_ecommerce2.purchase) === null || _data_ecommerce_purchase2 === void 0 ? void 0 : (_data_ecommerce_purchase_actionField1 = _data_ecommerce_purchase2.actionField) === null || _data_ecommerce_purchase_actionField1 === void 0 ? void 0 : _data_ecommerce_purchase_actionField1.revenue;\n            const getTax = data === null || data === void 0 ? void 0 : (_data_ecommerce3 = data.ecommerce) === null || _data_ecommerce3 === void 0 ? void 0 : (_data_ecommerce_purchase3 = _data_ecommerce3.purchase) === null || _data_ecommerce_purchase3 === void 0 ? void 0 : (_data_ecommerce_purchase_actionField2 = _data_ecommerce_purchase3.actionField) === null || _data_ecommerce_purchase_actionField2 === void 0 ? void 0 : _data_ecommerce_purchase_actionField2.tax;\n            if (getId) (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    total: parseFloat(getRevenue),\n                    id: getId,\n                    tax: parseFloat(getTax || 0),\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items: items.map((item)=>{\n                        return {\n                            orderId: getId,\n                            sku: item.id,\n                            name: item.name,\n                            category: item.category,\n                            unitPrice: parseFloat(item.price),\n                            quantity: parseInt(item.quantity),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        }\n        if (data[1] === \"purchase\") try {\n            const transactionData = data[2];\n            const items = transactionData.items;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    total: parseFloat(transactionData.value),\n                    id: transactionData.rawData.orderNumber,\n                    tax: parseFloat(transactionData.tax || 0),\n                    shipping: parseFloat(transactionData.shipping || 0),\n                    city: transactionData.city || \"N/A\",\n                    state: transactionData.state || \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items: items.map((item)=>{\n                        return {\n                            orderId: transactionData.rawData.orderNumber,\n                            sku: item.item_id,\n                            name: item.item_name || \"N/A\",\n                            category: item.item_category || \"N/A\",\n                            unitPrice: parseFloat(item.price || 0),\n                            quantity: parseInt(item.quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'DUTCHIEPLUS');\n        }\n    }\n};\nvar $bf8817691bed7f0e$export$2e2bcd8739ae039 = $bf8817691bed7f0e$var$dutchiePlusDataSource;\n\n});\n\n})();\n//# sourceMappingURL=dutchie-plus.eb0f20e6.js.map\n","import { datalayerSource } from \"src/shared/sources/google-datalayer-source\";\nimport observable from \"src/shared/utils/create-events-observable\";\n\nimport { TransactionCartItem } from \"../types\";\n\nconst dutchiePlusDataSource = () => {\n  // IMPORTANT NOTE: dutchieplus cart CURALEAF is Paid search only & greenvalleydispensary is display\n  window.dataLayer = window.dataLayer || [];\n\n  datalayerSource((data) => {\n    //* Works on Curaleaf\n    if (data.event === \"purchase\") {\n      observable.notify({\n        transactionEvent: {\n          id: data.ecommerce.transaction_id,\n          total: parseFloat(data.ecommerce.value),\n          tax: parseFloat(data.ecommerce.tax || 0),\n          shipping: parseFloat(data.ecommerce.shipping || 0),\n          city: \"N/A\",\n          country: \"USA\",\n          currency: \"USD\",\n          state: \"N/A\",\n          items: data.ecommerce.items.map((item) => {\n            return {\n              orderId: data.ecommerce.transaction_id,\n              sku: item.item_id,\n              name: item.item_name,\n              category: item.item_category,\n              unitPrice: parseFloat(item.price),\n              quantity: parseInt(item.quantity),\n              currency: \"USD\",\n            } as TransactionCartItem;\n          }),\n        },\n      });\n    }\n\n    if (data.event === \"add_to_cart\") {\n      const products = data.ecommerce.items;\n      const { item_id, item_name, item_category, full_price, quantity } = products[0];\n\n      observable.notify({\n        addToCartEvent: {\n          sku: item_id.toString(),\n          name: item_name?.toString() || \"N/A\",\n          category: item_category?.toString() || \"N/A\",\n          unitPrice: parseFloat(full_price || \"0\"),\n          quantity: parseInt(quantity || \"1\"),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (data.event === \"remove_from_cart\") {\n      const products = data.ecommerce.items;\n      const { item_id, item_name, item_category, full_price, quantity } = products[0];\n\n      observable.notify({\n        removeFromCartEvent: {\n          sku: item_id.toString(),\n          name: item_name?.toString() || \"N/A\",\n          category: item_category?.toString() || \"N/A\",\n          unitPrice: parseFloat(full_price || \"0\"),\n          quantity: parseInt(quantity || \"1\"),\n          currency: \"USD\",\n        },\n      });\n    }\n  });\n\n  // if window.locatoin.href includes 'order-confirmation'\n  // if (!window.location.href.includes(\"order-confirmation\")) {\n  //   return;\n  // }\n\n  // loop through the dataLayer and find the purchase event\n  for (let i = 0; i < window.dataLayer.length; i++) {\n    const data = window.dataLayer[i];\n    if (data.event === \"purchase\") {\n      // const orderContent: HTMLDivElement | any = document.getElementsByClassName(\"order-content\")[0];\n      // const text: string = orderContent?.innerText;\n      // const regex = /#(\\d+)/;\n      // const orderNumber = text.match(regex)[1];\n\n      // if (localStorage.getItem(\"orderNumber\") === orderNumber) {\n      //   return;\n      // }\n\n      // // set order id to local storage to prevent duplicate events\n      // localStorage.setItem(\"orderNumber\", orderNumber);\n\n      const items = data?.ecommerce?.purchase?.products;\n\n      const getId = data?.ecommerce?.purchase?.actionField?.id;\n      const getRevenue = data?.ecommerce?.purchase?.actionField?.revenue;\n      const getTax = data?.ecommerce?.purchase?.actionField?.tax;\n\n      if (getId) {\n        observable.notify({\n          transactionEvent: {\n            total: parseFloat(getRevenue),\n            id: getId,\n            tax: parseFloat(getTax || 0),\n            shipping: 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            items: items.map((item) => {\n              return {\n                orderId: getId,\n                sku: item.id,\n                name: item.name,\n                category: item.category,\n                unitPrice: parseFloat(item.price),\n                quantity: parseInt(item.quantity),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      }\n    }\n\n    if (data[1] === \"purchase\") {\n      try {\n        const transactionData = data[2];\n        const items = transactionData.items;\n\n        observable.notify({\n          transactionEvent: {\n            total: parseFloat(transactionData.value),\n            id: transactionData.rawData.orderNumber,\n            tax: parseFloat(transactionData.tax || 0),\n            shipping: parseFloat(transactionData.shipping || 0),\n            city: transactionData.city || \"N/A\",\n            state: transactionData.state || \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            items: items.map((item) => {\n              return {\n                orderId: transactionData.rawData.orderNumber,\n                sku: item.item_id,\n                name: item.item_name || \"N/A\",\n                category: item.item_category || \"N/A\",\n                unitPrice: parseFloat(item.price || 0),\n                quantity: parseInt(item.quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'DUTCHIEPLUS');\n      }\n    }\n  }\n};\n\nexport default dutchiePlusDataSource;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$bf8817691bed7f0e$export$2e2bcd8739ae039","set","s","enumerable","configurable","$3tZSl","$2hYdk","dataLayer","datalayerSource","data","event","default","notify","transactionEvent","id","ecommerce","transaction_id","total","parseFloat","value","tax","shipping","city","country","currency","state","items","map","item","orderId","sku","item_id","name","item_name","category","item_category","unitPrice","price","quantity","parseInt","full_price","products","addToCartEvent","toString","removeFromCartEvent","i","length","_data_ecommerce_purchase","_data_ecommerce","_data_ecommerce_purchase_actionField","_data_ecommerce_purchase1","_data_ecommerce1","_data_ecommerce_purchase_actionField1","_data_ecommerce_purchase2","_data_ecommerce2","_data_ecommerce_purchase_actionField2","_data_ecommerce_purchase3","_data_ecommerce3","purchase","getId","actionField","getRevenue","revenue","getTax","transactionData","rawData","orderNumber","error"],"version":3,"file":"dutchie-plus.eb0f20e6.js.map"}