{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/sweed.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cfehG\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $42737bbb065d20a9$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\nconst $42737bbb065d20a9$var$sweedDataSource = ()=>{\n    (0, $3tZSl.datalayerSource)((data)=>{\n        if (data.event === \"purchase\") {\n            console.log(\"Purchase Event: \", data);\n            try {\n                const transaction = data && data.ecommerce;\n                const products = transaction.items;\n                const { value: value, shipping: shipping, tax: tax } = transaction;\n                const transactionId = transaction && transaction.transaction_id && transaction.transaction_id.toString();\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        id: transactionId,\n                        total: parseFloat(value),\n                        tax: parseFloat(tax),\n                        city: \"N/A\",\n                        country: \"USA\",\n                        currency: \"USD\",\n                        shipping: shipping,\n                        state: \"N/A\",\n                        items: products.map((items)=>{\n                            const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = items;\n                            return {\n                                orderId: transactionId,\n                                category: item_category,\n                                currency: \"USD\",\n                                name: item_name,\n                                quantity: quantity,\n                                sku: item_id,\n                                unitPrice: parseFloat(price) || 0\n                            };\n                        })\n                    }\n                });\n            } catch (error) {\n                console.log(\"Log Warn Purchase Event: \", error);\n            }\n        }\n        if (data.event === \"add_to_cart\") try {\n            var _products_item_name, _products_item_category;\n            const transaction = data && data.ecommerce;\n            const products = transaction === null || transaction === void 0 ? void 0 : transaction.items[0];\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: products === null || products === void 0 ? void 0 : products.item_id.toString(),\n                    name: (products === null || products === void 0 ? void 0 : (_products_item_name = products.item_name) === null || _products_item_name === void 0 ? void 0 : _products_item_name.toString()) || \"N/A\",\n                    category: (products === null || products === void 0 ? void 0 : (_products_item_category = products.item_category) === null || _products_item_category === void 0 ? void 0 : _products_item_category.toString()) || \"N/A\",\n                    unitPrice: parseFloat((products === null || products === void 0 ? void 0 : products.price) || 0),\n                    quantity: parseInt((products === null || products === void 0 ? void 0 : products.quantity) || 1),\n                    currency: \"USD\"\n                }\n            });\n        } catch (error) {\n            console.log(\"Log Warn Add to Cart Event: \", error);\n        }\n        if (data.event === \"remove_from_cart\") try {\n            var _products_item_name1, _products_item_category1;\n            const transaction = data && data.ecommerce;\n            const products = transaction === null || transaction === void 0 ? void 0 : transaction.items[0];\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: products === null || products === void 0 ? void 0 : products.item_id.toString(),\n                    name: (products === null || products === void 0 ? void 0 : (_products_item_name1 = products.item_name) === null || _products_item_name1 === void 0 ? void 0 : _products_item_name1.toString()) || \"N/A\",\n                    category: (products === null || products === void 0 ? void 0 : (_products_item_category1 = products.item_category) === null || _products_item_category1 === void 0 ? void 0 : _products_item_category1.toString()) || \"N/A\",\n                    unitPrice: parseFloat((products === null || products === void 0 ? void 0 : products.price) || 0),\n                    quantity: parseInt((products === null || products === void 0 ? void 0 : products.quantity) || 1),\n                    currency: \"USD\"\n                }\n            });\n        } catch (error) {\n            console.log(\"Log Warn Remove from Cart Event: \", error);\n        }\n    });\n};\nvar $42737bbb065d20a9$export$2e2bcd8739ae039 = $42737bbb065d20a9$var$sweedDataSource;\n\n});\n\n})();\n//# sourceMappingURL=sweed.2c142433.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { EnvironmentEvents, TransactionCartItem } from \"../types\";\n\nconst sweedDataSource = () => {\n  datalayerSource((data: any): void => {\n    if (data.event === \"purchase\") {\n      console.log(\"Purchase Event: \", data);\n      try {\n        const transaction = data && data.ecommerce;\n        const products = transaction.items;\n        const { value, shipping, tax } = transaction;\n        const transactionId = transaction && transaction.transaction_id && transaction.transaction_id.toString();\n\n        observable.notify({\n          transactionEvent: {\n            id: transactionId,\n            total: parseFloat(value),\n            tax: parseFloat(tax),\n            city: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            shipping: shipping,\n            state: \"N/A\",\n            items: products.map((items: any) => {\n              const { item_id, item_name, item_category, price, quantity } = items;\n              return {\n                orderId: transactionId,\n                category: item_category,\n                currency: \"USD\",\n                name: item_name,\n                quantity,\n                sku: item_id,\n                unitPrice: parseFloat(price) || 0,\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        console.log(\"Log Warn Purchase Event: \", error);\n      }\n    }\n\n    if (data.event === \"add_to_cart\") {\n      try {\n        const transaction = data && data.ecommerce;\n        const products = transaction?.items[0];\n\n        observable.notify({\n          addToCartEvent: {\n            sku: products?.item_id.toString(),\n            name: products?.item_name?.toString() || \"N/A\",\n            category: products?.item_category?.toString() || \"N/A\",\n            unitPrice: parseFloat(products?.price || 0),\n            quantity: parseInt(products?.quantity || 1),\n            currency: \"USD\",\n          },\n        });\n      } catch (error) {\n        console.log(\"Log Warn Add to Cart Event: \", error);\n      }\n    }\n\n    if (data.event === \"remove_from_cart\") {\n      try {\n        const transaction = data && data.ecommerce;\n        const products = transaction?.items[0];\n        observable.notify({\n          removeFromCartEvent: {\n            sku: products?.item_id.toString(),\n            name: products?.item_name?.toString() || \"N/A\",\n            category: products?.item_category?.toString() || \"N/A\",\n            unitPrice: parseFloat(products?.price || 0),\n            quantity: parseInt(products?.quantity || 1),\n            currency: \"USD\",\n          }\n        });\n      } catch (error) {\n        console.log(\"Log Warn Remove from Cart Event: \", error);\n      }\n    }\n  });\n};\n\nexport default sweedDataSource;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$42737bbb065d20a9$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$3tZSl","datalayerSource","data","_products_item_name","_products_item_category","_products_item_name1","_products_item_category1","event","console","log","transaction","ecommerce","products","items","value","shipping","tax","transactionId","transaction_id","toString","default","notify","transactionEvent","id","total","parseFloat","city","country","currency","state","map","item_id","item_name","item_category","price","quantity","orderId","category","name","sku","unitPrice","error","addToCartEvent","parseInt","removeFromCartEvent"],"version":3,"file":"sweed.2c142433.js.map"}