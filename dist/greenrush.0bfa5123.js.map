{"mappings":"A,I,E,A,C,E,C,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SC2CA,EAtC4B,KAC1B,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,AAAC,IACjB,IAAM,EAAW,EAAI,YAAY,CACjC,GAAI,EAAI,WAAW,CAAC,QAAQ,CAAC,SAAW,EAAI,QAAQ,CAAC,QAAQ,CAAC,WAC5D,GAAI,CACF,IAAM,EAAc,KAAK,KAAK,CAAC,GACzB,EAAU,EAAY,IAAI,CAAC,KAAK,CAAC,IAAI,CAE3C,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,iBAAkB,CAChB,GAAI,EAAY,IAAI,CAAC,EAAE,CAAC,QAAQ,GAChC,KAAM,MACN,QAAS,MACT,SAAU,MACV,SAAU,EACV,MAAO,MACP,IAAK,WAAW,EAAY,IAAI,CAAC,GAAG,EACpC,MAAO,WAAW,EAAY,IAAI,CAAC,KAAK,EACxC,MAAO,EAAQ,GAAG,CAAC,AAAC,GACX,CAAA,CACL,QAAS,EAAY,IAAI,CAAC,EAAE,CAAC,QAAQ,GACrC,SAAU,EAAK,QAAQ,CAAC,QAAQ,GAChC,SAAU,MACV,KAAM,EAAK,IAAI,CAAC,QAAQ,GACxB,SAAU,SAAS,EAAK,QAAQ,EAChC,IAAK,EAAK,EAAE,CAAC,QAAQ,GACrB,UAAW,WAAW,EAAK,KAAK,CAClC,CAAA,EAEJ,CACF,EACF,CAAE,MAAO,EAAO,CAEhB,CAEJ,EACF,C","sources":["<anon>","src/shared/environment-data-sources/greenrush.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5ok7a\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $21bb331023b904e2$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\nconst $21bb331023b904e2$var$greenrushDataSource = ()=>{\n    (0, $eU8cG.xhrResponseSource)((xhr)=>{\n        const response = xhr.responseText;\n        if (xhr.responseURL.includes(\"cart\") && xhr.response.includes(\"pending\")) try {\n            const transaction = JSON.parse(response);\n            const product = transaction.data.items.data;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: transaction.data.id.toString(),\n                    city: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    shipping: 0,\n                    state: \"N/A\",\n                    tax: parseFloat(transaction.data.tax),\n                    total: parseFloat(transaction.data.total),\n                    items: product.map((item)=>{\n                        return {\n                            orderId: transaction.data.id.toString(),\n                            category: item.category.toString(),\n                            currency: \"USD\",\n                            name: item.name.toString(),\n                            quantity: parseInt(item.quantity),\n                            sku: item.id.toString(),\n                            unitPrice: parseFloat(item.price)\n                        };\n                    })\n                }\n            });\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'GREENRUSH');\n        }\n    });\n};\nvar $21bb331023b904e2$export$2e2bcd8739ae039 = $21bb331023b904e2$var$greenrushDataSource;\n\n});\n\n})();\n//# sourceMappingURL=greenrush.0bfa5123.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { TransactionCartItem } from \"../types\";\n\nconst greenrushDataSource = () => {\n  xhrResponseSource((xhr: XMLHttpRequest) => {\n    const response = xhr.responseText;\n    if (xhr.responseURL.includes(\"cart\") && xhr.response.includes(\"pending\")) {\n      try {\n        const transaction = JSON.parse(response);\n        const product = transaction.data.items.data;\n\n        observable.notify({\n          transactionEvent: {\n            id: transaction.data.id.toString(),\n            city: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            shipping: 0,\n            state: \"N/A\",\n            tax: parseFloat(transaction.data.tax),\n            total: parseFloat(transaction.data.total),\n            items: product.map((item: any) => {\n              return {\n                orderId: transaction.data.id.toString(),\n                category: item.category.toString(),\n                currency: \"USD\",\n                name: item.name.toString(),\n                quantity: parseInt(item.quantity),\n                sku: item.id.toString(),\n                unitPrice: parseFloat(item.price),\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'GREENRUSH');\n      }\n    }\n  });\n};\n\nexport default greenrushDataSource;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$21bb331023b904e2$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$eU8cG","xhrResponseSource","xhr","response","responseText","responseURL","includes","transaction","JSON","parse","product","data","items","default","notify","transactionEvent","id","toString","city","country","currency","shipping","state","tax","parseFloat","total","map","item","orderId","category","name","quantity","parseInt","sku","unitPrice","price","error"],"version":3,"file":"greenrush.0bfa5123.js.map"}