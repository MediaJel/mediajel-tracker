{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,W,O,C,G,I,E,E,S,E,E,SC+EA,EAzEsB,KACpB,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,AAAC,IACjB,IAAM,EAAU,EAAM,IAAI,CAE1B,GAAI,AAAiB,uBAAjB,EAAQ,IAAI,CAA2B,CACzC,IAAM,EAAW,EAAQ,OAAO,CAC1B,EAAU,EAAQ,OAAO,CAAC,OAAO,CAEvC,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,eAAgB,CACd,IAAK,EAAQ,EAAE,CAAC,QAAQ,GACxB,KAAO,AAAA,CAAA,EAAQ,IAAI,EAAI,KAAA,EAAO,QAAQ,GACtC,SAAW,AAAA,CAAA,EAAQ,eAAe,CAAC,IAAI,EAAI,EAAQ,eAAe,CAAC,EAAE,EAAI,KAAA,EAAO,QAAQ,GACxF,UAAW,WAAW,EAAQ,MAAM,CAAC,KAAK,EAAI,GAAK,IACnD,SAAU,SAAS,EAAS,QAAQ,EAAI,GACxC,SAAU,KACZ,CACF,EACF,CAEA,GAAI,AAAiB,0BAAjB,EAAQ,IAAI,CAA8B,CAC5C,IAAM,EAAW,EAAQ,OAAO,CAC1B,EAAU,EAAQ,OAAO,CAAC,OAAO,CAEvC,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,oBAAqB,CACnB,IAAK,EAAQ,EAAE,CAAC,QAAQ,GACxB,KAAO,AAAA,CAAA,EAAQ,IAAI,EAAI,KAAA,EAAO,QAAQ,GACtC,SAAW,AAAA,CAAA,EAAQ,eAAe,CAAC,IAAI,EAAI,EAAQ,eAAe,CAAC,EAAE,EAAI,KAAA,EAAO,QAAQ,GACxF,UAAW,WAAW,EAAQ,MAAM,CAAC,KAAK,EAAI,GAAK,IACnD,SAAU,SAAS,EAAS,QAAQ,EAAI,GACxC,SAAU,KACZ,CACF,EACF,CAEA,GAAI,AAAiB,uBAAjB,EAAQ,IAAI,CACd,GAAI,CACF,IAAM,EAAc,EAAQ,OAAO,CAAC,KAAK,CACnC,EAAW,EAAY,SAAS,CAEtC,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,iBAAkB,CAChB,GAAI,EAAY,EAAE,CAAC,QAAQ,GAC3B,MAAO,WAAW,EAAY,QAAQ,EAAI,IAC1C,IAAK,WAAW,EAAY,UAAU,EAAI,GAAK,IAC/C,SAAU,WAAW,EAAY,YAAY,GAAK,EAClD,KAAM,MACN,MAAO,MACP,QAAS,MACT,SAAU,MACV,MAAO,EAAS,GAAG,CAAC,AAAC,IACnB,GAAM,CAAA,QAAE,CAAO,CAAA,SAAE,CAAQ,CAAE,CAAG,EAC9B,MAAO,CACL,QAAS,EAAY,EAAE,CAAC,QAAQ,GAChC,UAAW,EAAQ,EAAE,CAAC,QAAQ,GAC9B,IAAK,EAAQ,EAAE,CAAC,QAAQ,GACxB,KAAO,AAAA,CAAA,EAAQ,IAAI,EAAI,KAAA,EAAO,QAAQ,GACtC,SAAW,AAAA,CAAA,EAAQ,eAAe,CAAC,IAAI,EAAI,EAAQ,eAAe,CAAC,EAAE,EAAI,KAAA,EAAO,QAAQ,GACxF,UAAW,WAAW,EAAQ,MAAM,CAAC,KAAK,EAAI,GAAK,IACnD,SAAU,SAAS,GAAY,GAC/B,SAAU,KACZ,CACF,EACF,CACF,EACF,CAAE,MAAO,EAAO,CAEhB,CAEJ,EACF,C,G,E,Q,S,C,C,C,E,E,E,O,C,oB,W,O,C,GC5EO,IAAM,EAAoB,AAAC,IAC9B,OAAO,gBAAgB,CAAC,UAAW,EAAU,CAAA,EACjD,C,E","sources":["<anon>","src/shared/environment-data-sources/meadow.ts","src/shared/sources/post-message-source.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"iDpjN\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $55edf320dd46bdc8$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $5ayqG = parcelRequire(\"5ayqG\");\nconst $55edf320dd46bdc8$var$meadowTracker = ()=>{\n    (0, $5ayqG.postMessageSource)((event)=>{\n        const rawData = event.data;\n        if (rawData.type === \"ANALYTICS_CART_ADD\") {\n            const cartData = rawData.payload;\n            const product = rawData.payload.product;\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: product.id.toString(),\n                    name: (product.name || \"N/A\").toString(),\n                    category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n                    unitPrice: parseFloat(product.option.price || 0) / 100,\n                    quantity: parseInt(cartData.quantity || 1),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (rawData.type === \"ANALYTICS_CART_REMOVE\") {\n            const cartData = rawData.payload;\n            const product = rawData.payload.product;\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: product.id.toString(),\n                    name: (product.name || \"N/A\").toString(),\n                    category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n                    unitPrice: parseFloat(product.option.price || 0) / 100,\n                    quantity: parseInt(cartData.quantity || 1),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (rawData.type === \"ANALYTICS_PURCHASE\") try {\n            const transaction = rawData.payload.order;\n            const products = transaction.lineItems;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: transaction.id.toString(),\n                    total: parseFloat(transaction.netPrice) / 100,\n                    tax: parseFloat(transaction.taxesTotal || 0) / 100,\n                    shipping: parseFloat(transaction.delivery_fee) || 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items: products.map((items)=>{\n                        const { product: product, quantity: quantity } = items;\n                        return {\n                            orderId: transaction.id.toString(),\n                            productId: product.id.toString(),\n                            sku: product.id.toString(),\n                            name: (product.name || \"N/A\").toString(),\n                            category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n                            unitPrice: parseFloat(product.option.price || 0) / 100,\n                            quantity: parseInt(quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'MEADOW');\n        }\n    });\n};\nvar $55edf320dd46bdc8$export$2e2bcd8739ae039 = $55edf320dd46bdc8$var$meadowTracker;\n\n});\nparcelRegister(\"5ayqG\", function(module, exports) {\n\n$parcel$export(module.exports, \"postMessageSource\", function () { return $5b9746592ec0dabd$export$653284ea2e114aa2; });\nconst $5b9746592ec0dabd$export$653284ea2e114aa2 = (callback)=>{\n    window.addEventListener(\"message\", callback, false);\n};\n\n});\n\n\n})();\n//# sourceMappingURL=meadow.ddef5515.js.map\n","import logger from \"src/shared/logger\";\nimport observable from \"src/shared/utils/create-events-observable\";\n\nimport { postMessageSource } from \"../sources/post-message-source\";\nimport { EnvironmentEvents, TransactionCartItem } from \"../types\";\n\nconst meadowTracker = () => {\n  postMessageSource((event: MessageEvent<any>): void => {\n    const rawData = event.data;\n\n    if (rawData.type === \"ANALYTICS_CART_ADD\") {\n      const cartData = rawData.payload;\n      const product = rawData.payload.product;\n\n      observable.notify({\n        addToCartEvent: {\n          sku: product.id.toString(),\n          name: (product.name || \"N/A\").toString(),\n          category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n          unitPrice: parseFloat(product.option.price || 0) / 100,\n          quantity: parseInt(cartData.quantity || 1),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (rawData.type === \"ANALYTICS_CART_REMOVE\") {\n      const cartData = rawData.payload;\n      const product = rawData.payload.product;\n\n      observable.notify({\n        removeFromCartEvent: {\n          sku: product.id.toString(),\n          name: (product.name || \"N/A\").toString(),\n          category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n          unitPrice: parseFloat(product.option.price || 0) / 100,\n          quantity: parseInt(cartData.quantity || 1),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (rawData.type === \"ANALYTICS_PURCHASE\") {\n      try {\n        const transaction = rawData.payload.order;\n        const products = transaction.lineItems;\n\n        observable.notify({\n          transactionEvent: {\n            id: transaction.id.toString(),\n            total: parseFloat(transaction.netPrice) / 100,\n            tax: parseFloat(transaction.taxesTotal || 0) / 100,\n            shipping: parseFloat(transaction.delivery_fee) || 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            items: products.map((items) => {\n              const { product, quantity } = items;\n              return {\n                orderId: transaction.id.toString(),\n                productId: product.id.toString(),\n                sku: product.id.toString(),\n                name: (product.name || \"N/A\").toString(),\n                category: (product.primaryCategory.name || product.primaryCategory.id || \"N/A\").toString(),\n                unitPrice: parseFloat(product.option.price || 0) / 100,\n                quantity: parseInt(quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'MEADOW');\n      }\n    }\n  });\n};\n\nexport default meadowTracker;\n","\nexport const postMessageSource = (callback: (event: MessageEvent<any>) => void): void => {\n    window.addEventListener(\"message\", callback, false)\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$55edf320dd46bdc8$export$2e2bcd8739ae039","$2hYdk","$5ayqG","postMessageSource","event","rawData","data","type","cartData","payload","product","default","notify","addToCartEvent","sku","id","toString","name","category","primaryCategory","unitPrice","parseFloat","option","price","quantity","parseInt","currency","removeFromCartEvent","transaction","order","products","lineItems","transactionEvent","total","netPrice","tax","taxesTotal","shipping","delivery_fee","city","state","country","items","map","orderId","productId","error","$5b9746592ec0dabd$export$653284ea2e114aa2","callback","addEventListener"],"version":3,"file":"meadow.ddef5515.js.map"}