{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/magento.ts","src/shared/sources/utils/is-tracker-loaded.ts","src/shared/sources/utils/trans-deduplicator.ts","src/shared/sources/utils/poll-for-element.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1JSyC\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $585d109b9a4d6c67$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $kDidw = parcelRequire(\"kDidw\");\n\nvar $ayme0 = parcelRequire(\"ayme0\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\n\nvar $gI1kx = parcelRequire(\"gI1kx\");\n// TODO: Use dataLayerSource?\n// TODO: Don't use 'key' for storage, use HOC extension\nconst $585d109b9a4d6c67$var$magentoDataSource = ()=>{\n    if (window.location.href.includes(\"/thank-you\")) {\n        const elements = [\n            \".flex.flex-col.lg\\\\:flex-row.lg\\\\:space-x-8\"\n        ]; // Waits for inner div to load (it loads the purchase data)\n        (0, $gI1kx.pollForElement)(elements, ()=>{\n            // isTrackerLoaded(() => {\n            window.dataLayer = window.dataLayer || [];\n            for(let i = 0; i < window.dataLayer.length; i++){\n                const data = window.dataLayer[i];\n                if (data.event === \"purchase\") {\n                    const ecommerce = data.ecommerce;\n                    (0, $kDidw.isTrackerLoaded)(()=>{\n                        (0, $ayme0.runOncePerPageLoad)(()=>{\n                            (0, $2hYdk.default).notify({\n                                transactionEvent: {\n                                    id: ecommerce.transaction_id.toString(),\n                                    total: parseFloat(ecommerce.value),\n                                    tax: parseFloat(ecommerce.tax) || 0,\n                                    shipping: parseFloat(ecommerce.shipping) || 0,\n                                    city: \"N/A\",\n                                    country: \"USA\",\n                                    currency: \"USD\",\n                                    state: \"N/A\",\n                                    items: ecommerce.items.map((item)=>{\n                                        return {\n                                            orderId: ecommerce.transaction_id.toString(),\n                                            sku: item.item_id.toString(),\n                                            name: (item.item_name || \"N/A\").toString(),\n                                            category: (item.item_category || \"N/A\").toString(),\n                                            unitPrice: parseFloat(item.price || 0),\n                                            quantity: parseInt(item.quantity || 1),\n                                            currency: \"USD\"\n                                        };\n                                    })\n                                }\n                            });\n                            sessionStorage.setItem(\"key\", \"loaded\");\n                        });\n                    });\n                }\n            }\n        // datalayerSource((data: any): void => {\n        //   if (data.event === \"purchase\") {\n        //     const ecommerce = data.ecommerce;\n        //     observable.notify({\n        //       transactionEvent: {\n        //         id: ecommerce.transaction_id.toString(),\n        //         total: parseFloat(ecommerce.value),\n        //         tax: parseFloat(ecommerce.tax) || 0,\n        //         shipping: parseFloat(ecommerce.shipping) || 0,\n        //         city: \"N/A\",\n        //         country: \"USA\",\n        //         currency: \"USD\",\n        //         state: \"N/A\",\n        //         items: ecommerce.items.map((item: any) => {\n        //           return {\n        //             orderId: ecommerce.transaction_id.toString(),\n        //             sku: item.item_id.toString(),\n        //             name: (item.item_name || \"N/A\").toString(),\n        //             category: (item.item_category || \"N/A\").toString(),\n        //             unitPrice: parseFloat(item.price || 0),\n        //             quantity: parseInt(item.quantity || 1),\n        //             currency: \"USD\",\n        //           } as TransactionCartItem;\n        //         }),\n        //       },\n        //     });\n        //     sessionStorage.setItem(\"key\", \"loaded\");\n        //   }\n        // });\n        // });\n        });\n    }\n    if (!sessionStorage.getItem(\"key\")) {\n        window.dataLayer = window.dataLayer || [];\n        for(let i = 0; i < window.dataLayer.length; i++){\n            const data = window.dataLayer[i];\n            if (data.event === \"purchase\") {\n                const ecommerce = data.ecommerce;\n                (0, $kDidw.isTrackerLoaded)(()=>{\n                    (0, $ayme0.runOncePerPageLoad)(()=>{\n                        (0, $2hYdk.default).notify({\n                            transactionEvent: {\n                                id: ecommerce.transaction_id.toString(),\n                                total: parseFloat(ecommerce.value),\n                                tax: parseFloat(ecommerce.tax) || 0,\n                                shipping: parseFloat(ecommerce.shipping) || 0,\n                                city: \"N/A\",\n                                country: \"USA\",\n                                currency: \"USD\",\n                                state: \"N/A\",\n                                items: ecommerce.items.map((item)=>{\n                                    return {\n                                        orderId: ecommerce.transaction_id.toString(),\n                                        sku: item.id.toString(),\n                                        name: (item.name || \"N/A\").toString(),\n                                        category: (item.category || \"N/A\").toString(),\n                                        unitPrice: parseFloat(item.price || 0),\n                                        quantity: parseInt(item.quantity || 1),\n                                        currency: \"USD\"\n                                    };\n                                })\n                            }\n                        });\n                        sessionStorage.setItem(\"key\", \"loaded\");\n                    });\n                });\n            }\n        }\n    }\n    (0, $eU8cG.xhrResponseSource)((xhr)=>{\n        try {\n            const getData = JSON.parse(xhr.responseText);\n            const products = getData && getData.items;\n            if (products !== undefined || products.length !== 0) {\n                const dataToJSON = JSON.stringify(getData);\n                sessionStorage.setItem(\"pixelData\", dataToJSON);\n            }\n        } catch (e) {}\n    });\n    if (window.location.pathname.includes(\"/checkout/onepage/success/\") || window.location.pathname.includes(\"/success/\")) setTimeout(()=>{\n        try {\n            const storedData = sessionStorage.getItem(\"pixelData\");\n            const retrievedObject = JSON.parse(storedData);\n            const productsList = retrievedObject && retrievedObject.items;\n            const checkoutSuccessElement = document.querySelector(\".checkout-success\");\n            const orderNumberElement = checkoutSuccessElement.querySelector(\"span\");\n            const orderNumber = orderNumberElement.textContent.trim();\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: orderNumber,\n                    total: parseFloat(retrievedObject.base_grand_total),\n                    tax: parseFloat(retrievedObject.base_tax_amount) || 0,\n                    shipping: parseFloat(retrievedObject.base_shipping_amount) || 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: productsList.map((product)=>{\n                        const { item_id: item_id, name: name, price: price, qty: qty } = product;\n                        return {\n                            orderId: orderNumber.toString(),\n                            productId: item_id.toString(),\n                            sku: item_id.toString(),\n                            name: (name || \"N/A\").toString(),\n                            category: \"N/A\",\n                            unitPrice: parseFloat(price || 0),\n                            quantity: parseInt(qty || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        } catch (error) {\n        // window.tracker(\"trackError\", JSON.stringify(error), \"MAGENTO\");\n        }\n        sessionStorage.setItem(\"pixelData\", \"0\");\n    }, 1000);\n};\nvar $585d109b9a4d6c67$export$2e2bcd8739ae039 = $585d109b9a4d6c67$var$magentoDataSource;\n\n});\nparcelRegister(\"kDidw\", function(module, exports) {\n\n$parcel$export(module.exports, \"isTrackerLoaded\", function () { return $d28923ed48da6cba$export$ab4cf8abbc961f2a; });\nconst $d28923ed48da6cba$export$ab4cf8abbc961f2a = (callback)=>{\n    if (window.tracker) callback();\n    else {\n        let trackerLoaded = false;\n        const intervalId = setInterval(()=>{\n            if (window.tracker && !trackerLoaded) {\n                trackerLoaded = true;\n                clearInterval(intervalId);\n                callback();\n            }\n        }, 100);\n    }\n};\n\n});\n\nparcelRegister(\"ayme0\", function(module, exports) {\n\n$parcel$export(module.exports, \"runOncePerPageLoad\", function () { return $75e8097ffc9f48ee$export$d3ea25cf7c7cc463; });\n/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */ \nvar $lwczO = parcelRequire(\"lwczO\");\nconst $75e8097ffc9f48ee$export$d3ea25cf7c7cc463 = (callback)=>{\n    const key = \"key\";\n    if (!sessionStorage.getItem(key)) {\n        (0, $lwczO.default).info(\"First run in this session\");\n        callback();\n        sessionStorage.setItem(key, \"loaded\");\n    } else (0, $lwczO.default).info(\"Already run in this session\");\n    // Listen for the unload event to reset the sessionStorage item\n    window.addEventListener(\"beforeunload\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    // Listen for page changes to reset the sessionStorage item\n    window.addEventListener(\"popstate\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    history.pushState = function(...args) {\n        originalPushState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n    history.replaceState = function(...args) {\n        originalReplaceState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n};\n\n});\n\nparcelRegister(\"gI1kx\", function(module, exports) {\n\n$parcel$export(module.exports, \"pollForElement\", function () { return $fedf0b5b30bf7cb9$export$7c481a487f148c99; });\n/*\n *   Waits for elements to be loaded in the DOM.\n *   It repeatedly checks if all the elements exist in the DOM.\n *   If all elements exist, it clears the interval and executes the provided callback function.\n */ const $fedf0b5b30bf7cb9$export$7c481a487f148c99 = (selectors, callback, interval = 100, timeout = 30000)=>{\n    const startTime = Date.now();\n    const poller = setInterval(()=>{\n        const elements = selectors.map((selector)=>{\n            const element = document.querySelector(selector);\n            return element !== null;\n        });\n        const isAllLoaded = elements.every(Boolean);\n        if (isAllLoaded) {\n            clearInterval(poller);\n            callback();\n        } else if (Date.now() - startTime >= timeout) clearInterval(poller);\n    }, interval);\n};\n\n});\n\n\n})();\n//# sourceMappingURL=magento.a5c0d1ba.js.map\n","import logger from \"src/shared/logger\";\nimport observable from \"src/shared/utils/create-events-observable\";\n\nimport { isTrackerLoaded } from \"../sources/utils/is-tracker-loaded\";\nimport { runOncePerPageLoad } from \"../sources/utils/trans-deduplicator\";\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { EnvironmentEvents, TransactionCartItem } from \"../types\";\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { pollForElement } from \"../sources/utils/poll-for-element\";\n\n// TODO: Use dataLayerSource?\n// TODO: Don't use 'key' for storage, use HOC extension\nconst magentoDataSource = () => {\n  if (window.location.href.includes(\"/thank-you\")) { // ilgm implementation\n    const elements = [\".flex.flex-col.lg\\\\:flex-row.lg\\\\:space-x-8\"]; // Waits for inner div to load (it loads the purchase data)\n\n    pollForElement(elements, () => {\n      // isTrackerLoaded(() => {\n        window.dataLayer = window.dataLayer || [];\n        for (let i = 0; i < window.dataLayer.length; i++) {\n          const data = window.dataLayer[i];\n      \n          if (data.event === \"purchase\") {\n            const ecommerce = data.ecommerce;\n      \n            isTrackerLoaded(() => {\n              runOncePerPageLoad(() => {\n                observable.notify({\n                  transactionEvent: {\n                    id: ecommerce.transaction_id.toString(),\n                    total: parseFloat(ecommerce.value),\n                    tax: parseFloat(ecommerce.tax) || 0,\n                    shipping: parseFloat(ecommerce.shipping) || 0,\n                    city: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    state: \"N/A\",\n                    items: ecommerce.items.map((item: any) => {\n                      return {\n                        orderId: ecommerce.transaction_id.toString(),\n                        sku: item.item_id.toString(),\n                        name: (item.item_name || \"N/A\").toString(),\n                        category: (item.item_category || \"N/A\").toString(),\n                        unitPrice: parseFloat(item.price || 0),\n                        quantity: parseInt(item.quantity || 1),\n                        currency: \"USD\",\n                      } as TransactionCartItem;\n                    }),\n                  },\n                });\n      \n                sessionStorage.setItem(\"key\", \"loaded\");\n              });\n            });\n          }\n        }\n        // datalayerSource((data: any): void => {\n        //   if (data.event === \"purchase\") {\n        //     const ecommerce = data.ecommerce;\n        //     observable.notify({\n        //       transactionEvent: {\n        //         id: ecommerce.transaction_id.toString(),\n        //         total: parseFloat(ecommerce.value),\n        //         tax: parseFloat(ecommerce.tax) || 0,\n        //         shipping: parseFloat(ecommerce.shipping) || 0,\n        //         city: \"N/A\",\n        //         country: \"USA\",\n        //         currency: \"USD\",\n        //         state: \"N/A\",\n        //         items: ecommerce.items.map((item: any) => {\n        //           return {\n        //             orderId: ecommerce.transaction_id.toString(),\n        //             sku: item.item_id.toString(),\n        //             name: (item.item_name || \"N/A\").toString(),\n        //             category: (item.item_category || \"N/A\").toString(),\n        //             unitPrice: parseFloat(item.price || 0),\n        //             quantity: parseInt(item.quantity || 1),\n        //             currency: \"USD\",\n        //           } as TransactionCartItem;\n        //         }),\n        //       },\n        //     });\n\n        //     sessionStorage.setItem(\"key\", \"loaded\");\n        //   }\n        // });\n      // });\n    });\n  }\n\n  if (!sessionStorage.getItem(\"key\")) { // datalayer\n    window.dataLayer = window.dataLayer || [];\n\n    for (let i = 0; i < window.dataLayer.length; i++) {\n      const data = window.dataLayer[i];\n\n      if (data.event === \"purchase\") {\n        const ecommerce = data.ecommerce;\n\n        isTrackerLoaded(() => {\n          runOncePerPageLoad(() => {\n            observable.notify({\n              transactionEvent: {\n                id: ecommerce.transaction_id.toString(),\n                total: parseFloat(ecommerce.value),\n                tax: parseFloat(ecommerce.tax) || 0,\n                shipping: parseFloat(ecommerce.shipping) || 0,\n                city: \"N/A\",\n                country: \"USA\",\n                currency: \"USD\",\n                state: \"N/A\",\n                items: ecommerce.items.map((item: any) => {\n                  return {\n                    orderId: ecommerce.transaction_id.toString(),\n                    sku: item.id.toString(),\n                    name: (item.name || \"N/A\").toString(),\n                    category: (item.category || \"N/A\").toString(),\n                    unitPrice: parseFloat(item.price || 0),\n                    quantity: parseInt(item.quantity || 1),\n                    currency: \"USD\",\n                  } as TransactionCartItem;\n                }),\n              },\n            });\n\n            sessionStorage.setItem(\"key\", \"loaded\");\n          });\n        });\n      }\n    }\n  }\n\n  xhrResponseSource((xhr) => {\n    try {\n      const getData = JSON.parse(xhr.responseText);\n\n      const products = getData && getData.items;\n\n      if (products !== undefined || products.length !== 0) {\n        const dataToJSON = JSON.stringify(getData);\n        sessionStorage.setItem(\"pixelData\", dataToJSON);\n      }\n    } catch (e) {}\n  });\n\n  if (\n    window.location.pathname.includes(\"/checkout/onepage/success/\") ||\n    window.location.pathname.includes(\"/success/\")\n  ) {\n    setTimeout(() => {\n      try {\n        const storedData = sessionStorage.getItem(\"pixelData\");\n        const retrievedObject = JSON.parse(storedData);\n        const productsList = retrievedObject && retrievedObject.items;\n\n        const checkoutSuccessElement = document.querySelector(\".checkout-success\");\n        const orderNumberElement = checkoutSuccessElement.querySelector(\"span\");\n        const orderNumber = orderNumberElement.textContent.trim();\n\n        observable.notify({\n          transactionEvent: {\n            id: orderNumber,\n            total: parseFloat(retrievedObject.base_grand_total),\n            tax: parseFloat(retrievedObject.base_tax_amount) || 0,\n            shipping: parseFloat(retrievedObject.base_shipping_amount) || 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"N/A\",\n            currency: \"USD\",\n            items: productsList.map((product) => {\n              const { item_id, name, price, qty } = product;\n              return {\n                orderId: orderNumber.toString(),\n                productId: item_id.toString(),\n                sku: item_id.toString(),\n                name: (name || \"N/A\").toString(),\n                category: \"N/A\",\n                unitPrice: parseFloat(price || 0),\n                quantity: parseInt(qty || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        // window.tracker(\"trackError\", JSON.stringify(error), \"MAGENTO\");\n      }\n      sessionStorage.setItem(\"pixelData\", \"0\");\n    }, 1000);\n  }\n};\n\nexport default magentoDataSource;\n","export const isTrackerLoaded = (callback: () => void): void => {\n  if (window.tracker) {\n    callback();\n  } else {\n    let trackerLoaded = false;\n    const intervalId = setInterval(() => {\n      if (window.tracker && !trackerLoaded) {\n        trackerLoaded = true;\n        clearInterval(intervalId);\n        callback();\n      }\n    }, 100);\n  }\n};\n","/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */\n\nimport logger from 'src/shared/logger';\n\nexport const runOncePerPageLoad = (callback) => {\n  const key = \"key\";\n\n  if (!sessionStorage.getItem(key)) {\n    logger.info(\"First run in this session\");\n    callback();\n    sessionStorage.setItem(key, \"loaded\");\n  } else {\n    logger.info(\"Already run in this session\");\n  }\n\n   // Listen for the unload event to reset the sessionStorage item\nwindow.addEventListener(\"beforeunload\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\n// Listen for page changes to reset the sessionStorage item\nwindow.addEventListener(\"popstate\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\nconst originalPushState = history.pushState;\nconst originalReplaceState = history.replaceState;\n\nhistory.pushState = function (...args) {\n  originalPushState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n\nhistory.replaceState = function (...args) {\n  originalReplaceState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n};","/*\n *   Waits for elements to be loaded in the DOM.\n *   It repeatedly checks if all the elements exist in the DOM.\n *   If all elements exist, it clears the interval and executes the provided callback function.\n */\n\nexport const pollForElement = (\n  selectors: string[],\n  callback: () => void,\n  interval: number = 100,\n  timeout: number = 30000\n): void => {\n  const startTime = Date.now();\n\n  const poller = setInterval(() => {\n    const elements = selectors.map((selector: string) => {\n      const element = document.querySelector(selector);\n      return element !== null;\n    });\n\n    const isAllLoaded = elements.every(Boolean);\n\n    if (isAllLoaded) {\n      clearInterval(poller);\n      callback();\n    } else if (Date.now() - startTime >= timeout) {\n      clearInterval(poller);\n      //console.error(`Timeout reached: elements with selectors \"${selectors.join(\", \")}\" not found.`);\n    }\n  }, interval);\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$585d109b9a4d6c67$export$2e2bcd8739ae039","$2hYdk","$kDidw","$ayme0","$eU8cG","$gI1kx","location","href","includes","pollForElement","dataLayer","i","length","data","event","ecommerce","isTrackerLoaded","runOncePerPageLoad","default","notify","transactionEvent","id","transaction_id","toString","total","parseFloat","value","tax","shipping","city","country","currency","state","items","map","item","orderId","sku","item_id","name","item_name","category","item_category","unitPrice","price","quantity","parseInt","sessionStorage","setItem","getItem","xhrResponseSource","xhr","getData","JSON","parse","responseText","products","undefined","dataToJSON","stringify","pathname","setTimeout","storedData","retrievedObject","productsList","orderNumber","orderNumberElement","checkoutSuccessElement","document","querySelector","textContent","trim","base_grand_total","base_tax_amount","base_shipping_amount","product","qty","productId","error","$d28923ed48da6cba$export$ab4cf8abbc961f2a","callback","tracker","trackerLoaded","intervalId","setInterval","clearInterval","$75e8097ffc9f48ee$export$d3ea25cf7c7cc463","$lwczO","info","addEventListener","removeItem","originalPushState","history","pushState","originalReplaceState","replaceState","args","apply","dispatchEvent","Event","$fedf0b5b30bf7cb9$export$7c481a487f148c99","selectors","interval","timeout","startTime","Date","now","poller","elements","selector","element","every","Boolean"],"version":3,"file":"magento.a5c0d1ba.js.map"}