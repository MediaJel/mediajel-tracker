{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/flowhub.ts","src/shared/utils/adapter-handler.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8HNqz\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $6f53eeb38821117b$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $lSX0J = parcelRequire(\"lSX0J\");\nconst $6f53eeb38821117b$var$FlowhubDataSource = (snowplow)=>{\n    const handler = (0, $lSX0J.multiAdapterHandler)(snowplow);\n    handler.add(\"Google Data Layer Source #1\", ()=>{\n        (0, $3tZSl.datalayerSource)((data)=>{\n            if (data.event === \"purchase\") {\n                console.log(\"Purchase Event: \", data);\n                try {\n                    const transaction = data && data.ecommerce;\n                    const products = transaction.items;\n                    const { value: value, shipping: shipping, tax: tax } = transaction;\n                    const transactionId = transaction && transaction.transaction_id && transaction.transaction_id.toString();\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            id: transactionId,\n                            total: parseFloat(value),\n                            tax: parseFloat(tax),\n                            city: \"N/A\",\n                            country: \"USA\",\n                            currency: \"USD\",\n                            shipping: shipping,\n                            state: \"N/A\",\n                            items: products.map((items)=>{\n                                const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = items;\n                                return {\n                                    orderId: transactionId,\n                                    category: item_category,\n                                    currency: \"USD\",\n                                    name: item_name,\n                                    quantity: quantity,\n                                    sku: item_id,\n                                    unitPrice: parseFloat(price) || 0\n                                };\n                            })\n                        }\n                    });\n                } catch (error) {\n                    console.log(\"Log Warn Purchase Event: \", error);\n                }\n            }\n        });\n    });\n    handler.execute();\n};\nvar $6f53eeb38821117b$export$2e2bcd8739ae039 = $6f53eeb38821117b$var$FlowhubDataSource;\n\n});\nparcelRegister(\"lSX0J\", function(module, exports) {\n\n$parcel$export(module.exports, \"multiAdapterHandler\", function () { return $126ed817d3cdab1d$export$606da16facbf2a29; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $126ed817d3cdab1d$export$a2b49bbac3f322 = (snowplow)=>{\n    const snowplowContext = snowplow.context.appId;\n    let successLogged = false;\n    const fns = [];\n    function isUnique(name) {\n        return fns.findIndex((fn)=>fn.name === name) === -1;\n    }\n    return {\n        add: (name, fn)=>{\n            (0, $lwczO.default).info(`Adding ${name} to the adapter handler...`);\n            fns.push({\n                name: name,\n                fn: fn\n            });\n        },\n        execute: ()=>{\n            (0, $lwczO.default).info(`Executing adapter handler...`);\n            for (const { name: name, fn: fn } of fns){\n                let success = false;\n                (0, $2hYdk.default).subscribe((event)=>{\n                    if (event.transactionEvent) success = true;\n                });\n                try {\n                    (0, $lwczO.default).info(`Attempting transaction with ${name}`);\n                    fn();\n                    if (success) {\n                        successLogged = true;\n                        (0, $lwczO.default).info(`Transaction successful with ${name}`);\n                        return;\n                    }\n                } catch (error) {\n                    (0, $lwczO.default).error(`Transaction Failed with ${name}`, error);\n                }\n            }\n            if (!successLogged) (0, $lwczO.default).error(\"All transaction attempts failed for the adapter.\");\n        }\n    };\n};\nconst $126ed817d3cdab1d$export$606da16facbf2a29 = (()=>{\n    let instance = null;\n    return (snowplow)=>{\n        if (!instance) instance = $126ed817d3cdab1d$export$a2b49bbac3f322(snowplow);\n        return instance;\n    };\n})();\n\n});\n\n\n})();\n//# sourceMappingURL=flowhub.24c09210.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\nimport { SnowplowTracker } from \"src/shared/snowplow/types\";\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { TransactionCartItem } from \"../types\";\nimport { multiAdapterHandler } from \"../utils/adapter-handler\";\n\nconst FlowhubDataSource = (snowplow: SnowplowTracker) => {\n    const handler = multiAdapterHandler(snowplow);\n\n    handler.add(\"Google Data Layer Source #1\", () => {\n        datalayerSource((data: any) => {\n            if (data.event === \"purchase\") {\n                console.log(\"Purchase Event: \", data);\n                try {\n                    const transaction = data && data.ecommerce;\n                    const products = transaction.items;\n                    const { value, shipping, tax } = transaction;\n                    const transactionId = transaction && transaction.transaction_id && transaction.transaction_id.toString();\n\n                    observable.notify({\n                        transactionEvent: {\n                            id: transactionId,\n                            total: parseFloat(value),\n                            tax: parseFloat(tax),\n                            city: \"N/A\",\n                            country: \"USA\",\n                            currency: \"USD\",\n                            shipping: shipping,\n                            state: \"N/A\",\n                            items: products.map((items: any) => {\n                            const { item_id, item_name, item_category, price, quantity } = items;\n                                return {\n                                    orderId: transactionId,\n                                    category: item_category,\n                                    currency: \"USD\",\n                                    name: item_name,\n                                    quantity,\n                                    sku: item_id,\n                                    unitPrice: parseFloat(price) || 0,\n                                } as TransactionCartItem;\n                            }),\n                        },\n                    });\n                } catch (error) {\n                    console.log(\"Log Warn Purchase Event: \", error);\n                }\n            }\n        });\n    });\n\n    handler.execute();\n};\n\nexport default FlowhubDataSource;\n","import logger from \"src/shared/logger\";\nimport observable from \"./create-events-observable\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\ntype HandlerFunction = () => void;\n\ninterface AdapterHandler {\n  add: (name: string, fn: HandlerFunction) => void;\n  execute: () => void;\n}\n\nexport const createAdapterHandler = (snowplow: SnowplowTracker) => {\n  const snowplowContext = snowplow.context.appId;\n  let successLogged = false;\n  const fns: Array<{ name: string; fn: HandlerFunction }> = [];\n\n  function isUnique(name: string) {\n    return fns.findIndex((fn) => fn.name === name) === -1;\n  }\n\n  return {\n    add: (name: string, fn: HandlerFunction) => {\n      logger.info(`Adding ${name} to the adapter handler...`);\n      fns.push({ name, fn });\n    },\n    execute: () => {\n      logger.info(`Executing adapter handler...`);\n\n      for (const { name, fn } of fns) {\n        let success = false;\n        observable.subscribe((event) => {\n          if (event.transactionEvent) success = true;\n        });\n\n        try {\n          logger.info(`Attempting transaction with ${name}`);\n          fn();\n\n          if (success) {\n            successLogged = true;\n            logger.info(`Transaction successful with ${name}`);\n            return;\n          }\n        } catch (error) {\n          logger.error(`Transaction Failed with ${name}`, error);\n        }\n      }\n\n\n      if (!successLogged) {\n        logger.error(\"All transaction attempts failed for the adapter.\");\n      }\n    },\n  } as AdapterHandler;\n};\n\nexport const multiAdapterHandler = (() => {\n  let instance: ReturnType<typeof createAdapterHandler> | null = null;\n  return (snowplow: SnowplowTracker) => {\n    if (!instance) {\n      instance = createAdapterHandler(snowplow);\n    }\n    return instance;\n  };\n})();\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$6f53eeb38821117b$export$2e2bcd8739ae039","$2hYdk","$3tZSl","$lSX0J","snowplow","handler","multiAdapterHandler","add","datalayerSource","data","event","console","log","transaction","ecommerce","products","items","value","shipping","tax","transactionId","transaction_id","toString","default","notify","transactionEvent","id","total","parseFloat","city","country","currency","state","map","item_id","item_name","item_category","price","quantity","orderId","category","name","sku","unitPrice","error","execute","instance","$126ed817d3cdab1d$export$606da16facbf2a29","$lwczO","$126ed817d3cdab1d$export$a2b49bbac3f322","context","appId","successLogged","fns","fn","info","push","success","subscribe"],"version":3,"file":"flowhub.24c09210.js.map"}