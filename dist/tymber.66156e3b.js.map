{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/tymber.ts","src/shared/sources/utils/is-tracker-loaded.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4axHD\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $6a722a9344db65a7$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $kDidw = parcelRequire(\"kDidw\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\nconst $6a722a9344db65a7$var$tymberDataSource = ()=>{\n    let success = false;\n    (0, $3tZSl.datalayerSource)((data)=>{\n        if (data.event === \"addToCart\") {\n            const products = data.ecommerce.add.products;\n            const currency = data.ecommerce.currency;\n            const { brand: brand, category: category, id: id, name: name, price: price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: id.toString(),\n                    name: (name || \"N/A\").toString(),\n                    category: (category || \"N/A\").toString(),\n                    unitPrice: parseFloat(price || 0),\n                    quantity: parseInt(quantity || 1),\n                    currency: (currency || \"USD\").toString()\n                }\n            });\n        }\n        if (data.event === \"removeFromCart\") {\n            const products = data.ecommerce.remove.products;\n            const currency = data.ecommerce.currency;\n            const { brand: brand, category: category, id: id, name: name, price: price, quantity: quantity } = products[0];\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: id.toString(),\n                    name: (name || \"N/A\").toString(),\n                    category: (category || \"N/A\").toString(),\n                    unitPrice: parseFloat(price || 0),\n                    quantity: parseInt(quantity || 1),\n                    currency: (currency || \"USD\").toString()\n                }\n            });\n        }\n        if (data.event === \"purchase\") try {\n            const transaction = data.ecommerce.actionField;\n            const products = data.ecommerce.products;\n            const { id: id, revenue: revenue, tax: tax } = transaction;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: id.toString(),\n                    total: parseFloat(revenue),\n                    tax: parseFloat(tax),\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: products.map((item)=>{\n                        return {\n                            orderId: transaction.id.toString(),\n                            sku: item.id.toString(),\n                            name: (item.name || \"N/A\").toString(),\n                            category: (item.category || \"N/A\").toString(),\n                            unitPrice: parseFloat(item.price || 0),\n                            quantity: parseInt(item.quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n            success = true;\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'TYMBER');\n        }\n    });\n    if (!success) {\n        const trackTransaction = (transaction)=>{\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: transaction.orderId.toString(),\n                    total: parseFloat(transaction.orderAmount),\n                    tax: parseFloat(transaction.taxTotal) || 0,\n                    shipping: parseFloat(transaction.shippingCostTotal) || 0,\n                    city: (transaction.billingAddress.city || \"N/A\").toString(),\n                    state: (transaction.billingAddress.stateOrProvinceCode || \"N/A\").toString(),\n                    country: (transaction.billingAddress.countryCode || \"N/A\").toString(),\n                    currency: \"USD\",\n                    items: transaction.lineItems.physicalItems.map((item)=>{\n                        return {\n                            orderId: transaction.orderId.toString(),\n                            sku: item.sku.toString(),\n                            name: (item.name || \"N/A\").toString(),\n                            category: \"N/A\",\n                            unitPrice: parseFloat(item.listPrice || 0),\n                            quantity: parseInt(item.quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        };\n        (0, $eU8cG.xhrResponseSource)((xhr)=>{\n            try {\n                const transaction = JSON.parse(JSON.stringify(JSON.parse(xhr.responseText)));\n                if (transaction.status && transaction.orderAmount > 0) (0, $kDidw.isTrackerLoaded)(()=>{\n                    trackTransaction(transaction);\n                });\n            } catch (error) {}\n        });\n    }\n};\nvar $6a722a9344db65a7$export$2e2bcd8739ae039 = $6a722a9344db65a7$var$tymberDataSource;\n\n});\nparcelRegister(\"kDidw\", function(module, exports) {\n\n$parcel$export(module.exports, \"isTrackerLoaded\", function () { return $d28923ed48da6cba$export$ab4cf8abbc961f2a; });\nconst $d28923ed48da6cba$export$ab4cf8abbc961f2a = (callback)=>{\n    if (window.tracker) callback();\n    else {\n        let trackerLoaded = false;\n        const intervalId = setInterval(()=>{\n            if (window.tracker && !trackerLoaded) {\n                trackerLoaded = true;\n                clearInterval(intervalId);\n                callback();\n            }\n        }, 100);\n    }\n};\n\n});\n\n\n})();\n//# sourceMappingURL=tymber.66156e3b.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { isTrackerLoaded } from \"../sources/utils/is-tracker-loaded\";\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { TransactionCartItem } from \"../types\";\n\nconst tymberDataSource = () => {\n  let success = false;\n  datalayerSource((data: any) => {\n    if (data.event === \"addToCart\") {\n      const products = data.ecommerce.add.products;\n      const currency = data.ecommerce.currency;\n      const { brand, category, id, name, price, quantity } = products[0];\n\n      observable.notify({\n        addToCartEvent: {\n          sku: id.toString(),\n          name: (name || \"N/A\").toString(),\n          category: (category || \"N/A\").toString(),\n          unitPrice: parseFloat(price || 0),\n          quantity: parseInt(quantity || 1),\n          currency: (currency || \"USD\").toString(),\n        },\n      });\n    }\n\n    if (data.event === \"removeFromCart\") {\n      const products = data.ecommerce.remove.products;\n      const currency = data.ecommerce.currency;\n      const { brand, category, id, name, price, quantity } = products[0];\n\n      observable.notify({\n        removeFromCartEvent: {\n          sku: id.toString(),\n          name: (name || \"N/A\").toString(),\n          category: (category || \"N/A\").toString(),\n          unitPrice: parseFloat(price || 0),\n          quantity: parseInt(quantity || 1),\n          currency: (currency || \"USD\").toString(),\n        },\n      });\n    }\n\n    if (data.event === \"purchase\") {\n      try {\n        const transaction = data.ecommerce.actionField;\n        const products = data.ecommerce.products;\n        const { id, revenue, tax } = transaction;\n\n        observable.notify({\n          transactionEvent: {\n            id: id.toString(),\n            total: parseFloat(revenue),\n            tax: parseFloat(tax),\n            shipping: 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"N/A\",\n            currency: \"USD\",\n            items: products.map((item) => {\n              return {\n                orderId: transaction.id.toString(),\n                sku: item.id.toString(),\n                name: (item.name || \"N/A\").toString(),\n                category: (item.category || \"N/A\").toString(),\n                unitPrice: parseFloat(item.price || 0),\n                quantity: parseInt(item.quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n\n        success = true;\n      } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'TYMBER');\n      }\n    }\n  });\n\n  if (!success) {\n    const trackTransaction = (transaction) => {\n      observable.notify({\n        transactionEvent: {\n          id: transaction.orderId.toString(),\n          total: parseFloat(transaction.orderAmount),\n          tax: parseFloat(transaction.taxTotal) || 0,\n          shipping: parseFloat(transaction.shippingCostTotal) || 0,\n          city: (transaction.billingAddress.city || \"N/A\").toString(),\n          state: (transaction.billingAddress.stateOrProvinceCode || \"N/A\").toString(),\n          country: (transaction.billingAddress.countryCode || \"N/A\").toString(),\n          currency: \"USD\",\n          items: transaction.lineItems.physicalItems.map((item) => {\n            return {\n              orderId: transaction.orderId.toString(),\n              sku: item.sku.toString(),\n              name: (item.name || \"N/A\").toString(),\n              category: \"N/A\",\n              unitPrice: parseFloat(item.listPrice || 0),\n              quantity: parseInt(item.quantity || 1),\n              currency: \"USD\",\n            } as TransactionCartItem;\n          }),\n        },\n      });\n    };\n\n    xhrResponseSource((xhr) => {\n      try {\n        const transaction = JSON.parse(JSON.stringify(JSON.parse(xhr.responseText)));\n        if (transaction.status && transaction.orderAmount > 0) {\n\n          isTrackerLoaded(() => {\n            trackTransaction(transaction);\n          });\n        }\n      } catch (error) { }\n    });\n  }\n};\n\nexport default tymberDataSource;\n","export const isTrackerLoaded = (callback: () => void): void => {\n  if (window.tracker) {\n    callback();\n  } else {\n    let trackerLoaded = false;\n    const intervalId = setInterval(() => {\n      if (window.tracker && !trackerLoaded) {\n        trackerLoaded = true;\n        clearInterval(intervalId);\n        callback();\n      }\n    }, 100);\n  }\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$6a722a9344db65a7$export$2e2bcd8739ae039","$2hYdk","$3tZSl","$kDidw","$eU8cG","success","datalayerSource","data","event","products","ecommerce","add","currency","brand","category","id","name","price","quantity","default","notify","addToCartEvent","sku","toString","unitPrice","parseFloat","parseInt","remove","removeFromCartEvent","transaction","actionField","revenue","tax","transactionEvent","total","shipping","city","state","country","items","map","item","orderId","error","trackTransaction","orderAmount","taxTotal","shippingCostTotal","billingAddress","stateOrProvinceCode","countryCode","lineItems","physicalItems","listPrice","xhrResponseSource","xhr","JSON","parse","stringify","responseText","status","isTrackerLoaded","$d28923ed48da6cba$export$ab4cf8abbc961f2a","callback","tracker","trackerLoaded","intervalId","setInterval","clearInterval"],"version":3,"file":"tymber.66156e3b.js.map"}