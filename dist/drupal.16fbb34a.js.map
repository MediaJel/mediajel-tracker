{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,W,O,C,G,I,E,E,S,E,E,S,E,E,SC8CA,EAxCyB,KACvB,OAAO,SAAS,CAAG,OAAO,SAAS,EAAI,EAAE,CAEzC,IAAK,IAAI,EAAI,EAAG,EAAI,OAAO,SAAS,CAAC,MAAM,CAAE,IAAK,CAChD,IAAM,EAAO,OAAO,SAAS,CAAC,EAAE,CAEhC,GAAI,AAAe,aAAf,EAAK,KAAK,CAAiB,CAC7B,IAAM,EAAY,EAAK,SAAS,CAEhC,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,KACd,AAAA,CAAA,EAAA,EAAA,kBAAiB,AAAjB,EAAmB,KACjB,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,iBAAkB,CAChB,GAAI,EAAU,cAAc,CAAC,QAAQ,GACrC,MAAO,WAAW,EAAU,KAAK,EACjC,IAAK,WAAW,EAAU,GAAG,GAAK,EAClC,SAAU,WAAW,EAAU,QAAQ,GAAK,EAC5C,KAAM,MACN,QAAS,MACT,SAAU,MACV,MAAO,MACP,MAAO,EAAU,KAAK,CAAC,GAAG,CAAC,AAAC,GACnB,CAAA,CACL,QAAS,EAAU,cAAc,CAAC,QAAQ,GAC1C,IAAK,EAAK,OAAO,CAAC,QAAQ,GAC1B,KAAO,AAAA,CAAA,EAAK,SAAS,EAAI,KAAA,EAAO,QAAQ,GACxC,SAAU,MACV,UAAW,WAAW,EAAK,KAAK,EAAI,GACpC,SAAU,SAAS,EAAK,QAAQ,EAAI,GACpC,SAAU,KACZ,CAAA,EAEJ,CACF,EACF,EACF,EACF,CACF,CACF,C,G,E,Q,S,C,C,C,E,E,E,O,C,kB,W,O,C,GC5CO,IAAM,EAAkB,AAAC,IAC9B,GAAI,OAAO,OAAO,CAChB,QACK,CACL,IAAI,EAAgB,CAAA,EACd,EAAa,YAAY,KACzB,OAAO,OAAO,EAAI,CAAC,IACrB,EAAgB,CAAA,EAChB,cAAc,GACd,IAEJ,EAAG,IACL,CACF,C,G,E,Q,S,C,C,C,E,E,E,O,C,qB,W,O,C,GCRC,IAAA,EAAA,EAAA,SAIM,IAAM,EAAqB,AAAC,IAG5B,eAAe,OAAO,CAFf,OAOV,AAAA,CAAA,EAAA,EAAA,OAAK,AAAL,EAAO,IAAI,CAAC,gCAJZ,AAAA,CAAA,EAAA,EAAA,OAAK,AAAL,EAAO,IAAI,CAAC,6BACZ,IACA,eAAe,OAAO,CALZ,MAKkB,WAMhC,OAAO,gBAAgB,CAAC,eAAgB,KACtC,eAAe,UAAU,CAAC,MAC5B,GAGA,OAAO,gBAAgB,CAAC,WAAY,KAClC,eAAe,UAAU,CAAC,MAC5B,GAEA,IAAM,EAAoB,QAAQ,SAAS,CACrC,EAAuB,QAAQ,YAAY,AAEjD,CAAA,QAAQ,SAAS,CAAG,SAAU,GAAG,CAAI,EACnC,EAAkB,KAAK,CAAC,IAAI,CAAE,GAC9B,eAAe,UAAU,CAAC,OAC1B,OAAO,aAAa,CAAC,IAAI,MAAM,YACjC,EAEA,QAAQ,YAAY,CAAG,SAAU,GAAG,CAAI,EACtC,EAAqB,KAAK,CAAC,IAAI,CAAE,GACjC,eAAe,UAAU,CAAC,OAC1B,OAAO,aAAa,CAAC,IAAI,MAAM,YACjC,CACA,C,E","sources":["<anon>","src/shared/environment-data-sources/drupal.ts","src/shared/sources/utils/is-tracker-loaded.ts","src/shared/sources/utils/trans-deduplicator.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7CjLf\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $a4737b67b94a754f$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $kDidw = parcelRequire(\"kDidw\");\n\nvar $ayme0 = parcelRequire(\"ayme0\");\nconst $a4737b67b94a754f$var$drupalDataSource = ()=>{\n    window.dataLayer = window.dataLayer || [];\n    for(let i = 0; i < window.dataLayer.length; i++){\n        const data = window.dataLayer[i];\n        if (data.event === \"purchase\") {\n            const ecommerce = data.ecommerce;\n            (0, $kDidw.isTrackerLoaded)(()=>{\n                (0, $ayme0.runOncePerPageLoad)(()=>{\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            id: ecommerce.transaction_id.toString(),\n                            total: parseFloat(ecommerce.value),\n                            tax: parseFloat(ecommerce.tax) || 0,\n                            shipping: parseFloat(ecommerce.shipping) || 0,\n                            city: \"N/A\",\n                            country: \"USA\",\n                            currency: \"USD\",\n                            state: \"N/A\",\n                            items: ecommerce.items.map((item)=>{\n                                return {\n                                    orderId: ecommerce.transaction_id.toString(),\n                                    sku: item.item_id.toString(),\n                                    name: (item.item_name || \"N/A\").toString(),\n                                    category: \"N/A\",\n                                    unitPrice: parseFloat(item.price || 0),\n                                    quantity: parseInt(item.quantity || 1),\n                                    currency: \"USD\"\n                                };\n                            })\n                        }\n                    });\n                });\n            });\n        }\n    }\n};\nvar $a4737b67b94a754f$export$2e2bcd8739ae039 = $a4737b67b94a754f$var$drupalDataSource;\n\n});\nparcelRegister(\"kDidw\", function(module, exports) {\n\n$parcel$export(module.exports, \"isTrackerLoaded\", function () { return $d28923ed48da6cba$export$ab4cf8abbc961f2a; });\nconst $d28923ed48da6cba$export$ab4cf8abbc961f2a = (callback)=>{\n    if (window.tracker) callback();\n    else {\n        let trackerLoaded = false;\n        const intervalId = setInterval(()=>{\n            if (window.tracker && !trackerLoaded) {\n                trackerLoaded = true;\n                clearInterval(intervalId);\n                callback();\n            }\n        }, 100);\n    }\n};\n\n});\n\nparcelRegister(\"ayme0\", function(module, exports) {\n\n$parcel$export(module.exports, \"runOncePerPageLoad\", function () { return $75e8097ffc9f48ee$export$d3ea25cf7c7cc463; });\n/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */ \nvar $lwczO = parcelRequire(\"lwczO\");\nconst $75e8097ffc9f48ee$export$d3ea25cf7c7cc463 = (callback)=>{\n    const key = \"key\";\n    if (!sessionStorage.getItem(key)) {\n        (0, $lwczO.default).info(\"First run in this session\");\n        callback();\n        sessionStorage.setItem(key, \"loaded\");\n    } else (0, $lwczO.default).info(\"Already run in this session\");\n    // Listen for the unload event to reset the sessionStorage item\n    window.addEventListener(\"beforeunload\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    // Listen for page changes to reset the sessionStorage item\n    window.addEventListener(\"popstate\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    history.pushState = function(...args) {\n        originalPushState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n    history.replaceState = function(...args) {\n        originalReplaceState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n};\n\n});\n\n\n})();\n//# sourceMappingURL=drupal.16fbb34a.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { TransactionCartItem } from \"../types\";\nimport { isTrackerLoaded } from \"../sources/utils/is-tracker-loaded\";\nimport { runOncePerPageLoad } from \"../sources/utils/trans-deduplicator\";\n\nconst drupalDataSource = () => {\n  window.dataLayer = window.dataLayer || [];\n\n  for (let i = 0; i < window.dataLayer.length; i++) {\n    const data = window.dataLayer[i];\n\n    if (data.event === \"purchase\") {\n      const ecommerce = data.ecommerce;\n\n      isTrackerLoaded(() => {\n        runOncePerPageLoad(() => {\n          observable.notify({\n            transactionEvent: {\n              id: ecommerce.transaction_id.toString(),\n              total: parseFloat(ecommerce.value),\n              tax: parseFloat(ecommerce.tax) || 0,\n              shipping: parseFloat(ecommerce.shipping) || 0,\n              city: \"N/A\",\n              country: \"USA\",\n              currency: \"USD\",\n              state: \"N/A\",\n              items: ecommerce.items.map((item: any) => {\n                return {\n                  orderId: ecommerce.transaction_id.toString(),\n                  sku: item.item_id.toString(),\n                  name: (item.item_name || \"N/A\").toString(),\n                  category: \"N/A\",\n                  unitPrice: parseFloat(item.price || 0),\n                  quantity: parseInt(item.quantity || 1),\n                  currency: \"USD\",\n                } as TransactionCartItem;\n              }),\n            },\n          });\n        });\n      });\n    }\n  }\n};\n\nexport default drupalDataSource;\n","export const isTrackerLoaded = (callback: () => void): void => {\n  if (window.tracker) {\n    callback();\n  } else {\n    let trackerLoaded = false;\n    const intervalId = setInterval(() => {\n      if (window.tracker && !trackerLoaded) {\n        trackerLoaded = true;\n        clearInterval(intervalId);\n        callback();\n      }\n    }, 100);\n  }\n};\n","/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */\n\nimport logger from 'src/shared/logger';\n\nexport const runOncePerPageLoad = (callback) => {\n  const key = \"key\";\n\n  if (!sessionStorage.getItem(key)) {\n    logger.info(\"First run in this session\");\n    callback();\n    sessionStorage.setItem(key, \"loaded\");\n  } else {\n    logger.info(\"Already run in this session\");\n  }\n\n   // Listen for the unload event to reset the sessionStorage item\nwindow.addEventListener(\"beforeunload\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\n// Listen for page changes to reset the sessionStorage item\nwindow.addEventListener(\"popstate\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\nconst originalPushState = history.pushState;\nconst originalReplaceState = history.replaceState;\n\nhistory.pushState = function (...args) {\n  originalPushState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n\nhistory.replaceState = function (...args) {\n  originalReplaceState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$a4737b67b94a754f$export$2e2bcd8739ae039","$2hYdk","$kDidw","$ayme0","dataLayer","i","length","data","event","ecommerce","isTrackerLoaded","runOncePerPageLoad","default","notify","transactionEvent","id","transaction_id","toString","total","parseFloat","value","tax","shipping","city","country","currency","state","items","map","item","orderId","sku","item_id","name","item_name","category","unitPrice","price","quantity","parseInt","$d28923ed48da6cba$export$ab4cf8abbc961f2a","callback","tracker","trackerLoaded","intervalId","setInterval","clearInterval","$75e8097ffc9f48ee$export$d3ea25cf7c7cc463","$lwczO","sessionStorage","getItem","info","setItem","addEventListener","removeItem","originalPushState","history","pushState","originalReplaceState","replaceState","args","apply","dispatchEvent","Event"],"version":3,"file":"drupal.16fbb34a.js.map"}