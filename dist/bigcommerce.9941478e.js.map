{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/bigcommerce.ts","src/shared/sources/utils/is-tracker-loaded.ts","src/shared/utils/adapter-handler.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dPAKA\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $e98fc9ad2abcf755$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $kDidw = parcelRequire(\"kDidw\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $lSX0J = parcelRequire(\"lSX0J\");\nconst $e98fc9ad2abcf755$var$bigcommerceDataSource = (snowplow)=>{\n    const handler = (0, $lSX0J.multiAdapterHandler)(snowplow);\n    handler.add(\"XHR Response Source #1\", ()=>{\n        (0, $eU8cG.xhrResponseSource)((xhr)=>{\n            var _transaction_lineItems;\n            if (!(xhr === null || xhr === void 0 ? void 0 : xhr.responseText)) return;\n            let transaction;\n            try {\n                const parsedData = JSON.parse(xhr.responseText);\n                // Verify parsed data is actually an object\n                if (!parsedData || typeof parsedData !== \"object\") return;\n                transaction = parsedData;\n            } catch (e) {\n                // Silent fail if JSON parsing fails\n                return;\n            }\n            const products = transaction === null || transaction === void 0 ? void 0 : (_transaction_lineItems = transaction.lineItems) === null || _transaction_lineItems === void 0 ? void 0 : _transaction_lineItems.physicalItems;\n            const getLatestOrder = localStorage.getItem(\"latestOrder\");\n            if (!(transaction === null || transaction === void 0 ? void 0 : transaction.orderId)) return;\n            if ((transaction === null || transaction === void 0 ? void 0 : transaction.status) !== \"AWAITING_FULFILLMENT\") return;\n            if (getLatestOrder === transaction.orderId.toString()) return;\n            try {\n                var _transaction_billingAddress, _transaction_billingAddress1, _transaction_billingAddress2;\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        id: transaction.orderId.toString(),\n                        total: parseFloat(transaction.orderAmount),\n                        tax: parseFloat(transaction.taxTotal) || 0,\n                        shipping: parseFloat(transaction.shippingCostTotal) || 0,\n                        city: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress = transaction.billingAddress) === null || _transaction_billingAddress === void 0 ? void 0 : _transaction_billingAddress.city) || \"N/A\").toString(),\n                        state: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress1 = transaction.billingAddress) === null || _transaction_billingAddress1 === void 0 ? void 0 : _transaction_billingAddress1.stateOrProvinceCode) || \"N/A\").toString(),\n                        country: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress2 = transaction.billingAddress) === null || _transaction_billingAddress2 === void 0 ? void 0 : _transaction_billingAddress2.countryCode) || \"N/A\").toString(),\n                        currency: \"USD\",\n                        items: (products === null || products === void 0 ? void 0 : products.map((product)=>{\n                            const { sku: sku, name: name, listPrice: listPrice, quantity: quantity } = product;\n                            return {\n                                orderId: transaction.orderId.toString(),\n                                sku: (sku === null || sku === void 0 ? void 0 : sku.toString()) || \"N/A\",\n                                name: (name || \"N/A\").toString(),\n                                category: \"N/A\",\n                                unitPrice: parseFloat(listPrice || 0),\n                                quantity: parseInt(quantity || 1),\n                                currency: \"USD\"\n                            };\n                        })) || []\n                    }\n                });\n                localStorage.setItem(\"latestOrder\", transaction.orderId.toString());\n            } catch (e) {\n            // Silent fail for notification errors\n            }\n        });\n    });\n    handler.add(\"XHR Response Source #2\", ()=>{\n        (0, $eU8cG.xhrResponseSource)((xhr)=>{\n            let transaction;\n            try {\n                transaction = JSON.parse(xhr.responseText);\n            } catch (e) {\n                // Silent fail if JSON parsing fails\n                return;\n            }\n            if ((transaction === null || transaction === void 0 ? void 0 : transaction.status) && (transaction === null || transaction === void 0 ? void 0 : transaction.orderAmount) > 0) try {\n                (0, $kDidw.isTrackerLoaded)(()=>{\n                    var _transaction_orderId, _transaction_billingAddress, _transaction_billingAddress1, _transaction_billingAddress2, _transaction_lineItems_physicalItems, _transaction_lineItems;\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            id: (transaction === null || transaction === void 0 ? void 0 : (_transaction_orderId = transaction.orderId) === null || _transaction_orderId === void 0 ? void 0 : _transaction_orderId.toString()) || \"\",\n                            total: parseFloat((transaction === null || transaction === void 0 ? void 0 : transaction.orderAmount) || 0),\n                            tax: parseFloat((transaction === null || transaction === void 0 ? void 0 : transaction.taxTotal) || 0),\n                            shipping: parseFloat((transaction === null || transaction === void 0 ? void 0 : transaction.shippingCostTotal) || 0),\n                            city: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress = transaction.billingAddress) === null || _transaction_billingAddress === void 0 ? void 0 : _transaction_billingAddress.city) || \"N/A\").toString(),\n                            state: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress1 = transaction.billingAddress) === null || _transaction_billingAddress1 === void 0 ? void 0 : _transaction_billingAddress1.stateOrProvinceCode) || \"N/A\").toString(),\n                            country: ((transaction === null || transaction === void 0 ? void 0 : (_transaction_billingAddress2 = transaction.billingAddress) === null || _transaction_billingAddress2 === void 0 ? void 0 : _transaction_billingAddress2.countryCode) || \"N/A\").toString(),\n                            currency: \"USD\",\n                            items: (transaction === null || transaction === void 0 ? void 0 : (_transaction_lineItems = transaction.lineItems) === null || _transaction_lineItems === void 0 ? void 0 : (_transaction_lineItems_physicalItems = _transaction_lineItems.physicalItems) === null || _transaction_lineItems_physicalItems === void 0 ? void 0 : _transaction_lineItems_physicalItems.map((item)=>{\n                                var _transaction_orderId, _item_sku;\n                                return {\n                                    orderId: (transaction === null || transaction === void 0 ? void 0 : (_transaction_orderId = transaction.orderId) === null || _transaction_orderId === void 0 ? void 0 : _transaction_orderId.toString()) || \"\",\n                                    sku: (item === null || item === void 0 ? void 0 : (_item_sku = item.sku) === null || _item_sku === void 0 ? void 0 : _item_sku.toString()) || \"N/A\",\n                                    name: ((item === null || item === void 0 ? void 0 : item.name) || \"N/A\").toString(),\n                                    category: \"N/A\",\n                                    unitPrice: parseFloat((item === null || item === void 0 ? void 0 : item.listPrice) || 0),\n                                    quantity: parseInt((item === null || item === void 0 ? void 0 : item.quantity) || 1),\n                                    currency: \"USD\"\n                                };\n                            })) || []\n                        }\n                    });\n                });\n            } catch (error) {\n            // Silent fail for tracker errors\n            }\n        });\n    });\n    handler.add(\"Datalayer Source\", ()=>{\n        (0, $3tZSl.datalayerSource)((data)=>{\n            const purchase = data[2];\n            const items = (purchase === null || purchase === void 0 ? void 0 : purchase.items) || [];\n            if (data[1] === \"purchase\") (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: purchase.transaction_id.toString(),\n                    total: parseFloat(purchase.value || 0),\n                    tax: parseFloat(purchase.tax || 0),\n                    shipping: parseFloat(purchase.shipping || 0),\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: items.map((item)=>({\n                            orderId: purchase.transaction_id.toString(),\n                            sku: item.item_id.toString() || \"N/A\",\n                            name: (item.item_name || \"N/A\").toString(),\n                            category: item.item_category.toString() || \"N/A\",\n                            unitPrice: parseFloat(item.price || 0),\n                            quantity: parseInt(item.quantity || 1),\n                            currency: \"USD\"\n                        }))\n                }\n            });\n        });\n    });\n    handler.execute();\n};\nvar $e98fc9ad2abcf755$export$2e2bcd8739ae039 = $e98fc9ad2abcf755$var$bigcommerceDataSource;\n\n});\nparcelRegister(\"kDidw\", function(module, exports) {\n\n$parcel$export(module.exports, \"isTrackerLoaded\", function () { return $d28923ed48da6cba$export$ab4cf8abbc961f2a; });\nconst $d28923ed48da6cba$export$ab4cf8abbc961f2a = (callback)=>{\n    if (window.tracker) callback();\n    else {\n        let trackerLoaded = false;\n        const intervalId = setInterval(()=>{\n            if (window.tracker && !trackerLoaded) {\n                trackerLoaded = true;\n                clearInterval(intervalId);\n                callback();\n            }\n        }, 100);\n    }\n};\n\n});\n\nparcelRegister(\"lSX0J\", function(module, exports) {\n\n$parcel$export(module.exports, \"multiAdapterHandler\", function () { return $126ed817d3cdab1d$export$606da16facbf2a29; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $126ed817d3cdab1d$export$a2b49bbac3f322 = (snowplow)=>{\n    const snowplowContext = snowplow.context.appId;\n    let successLogged = false;\n    const fns = [];\n    function isUnique(name) {\n        return fns.findIndex((fn)=>fn.name === name) === -1;\n    }\n    return {\n        add: (name, fn)=>{\n            (0, $lwczO.default).info(`Adding ${name} to the adapter handler...`);\n            fns.push({\n                name: name,\n                fn: fn\n            });\n        },\n        execute: ()=>{\n            (0, $lwczO.default).info(`Executing adapter handler...`);\n            for (const { name: name, fn: fn } of fns){\n                let success = false;\n                (0, $2hYdk.default).subscribe((event)=>{\n                    if (event.transactionEvent) success = true;\n                });\n                try {\n                    (0, $lwczO.default).info(`Attempting transaction with ${name}`);\n                    fn();\n                    if (success) {\n                        successLogged = true;\n                        (0, $lwczO.default).info(`Transaction successful with ${name}`);\n                        return;\n                    }\n                } catch (error) {\n                    (0, $lwczO.default).error(`Transaction Failed with ${name}`, error);\n                }\n            }\n            if (!successLogged) (0, $lwczO.default).error(\"All transaction attempts failed for the adapter.\");\n        }\n    };\n};\nconst $126ed817d3cdab1d$export$606da16facbf2a29 = (()=>{\n    let instance = null;\n    return (snowplow)=>{\n        if (!instance) instance = $126ed817d3cdab1d$export$a2b49bbac3f322(snowplow);\n        return instance;\n    };\n})();\n\n});\n\n\n})();\n//# sourceMappingURL=bigcommerce.9941478e.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\nimport { isTrackerLoaded } from \"../sources/utils/is-tracker-loaded\";\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { TransactionCartItem } from \"../types\";\nimport { multiAdapterHandler } from \"../utils/adapter-handler\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\nconst bigcommerceDataSource = (snowplow: SnowplowTracker) => {\n  const handler = multiAdapterHandler(snowplow);\n\n  handler.add(\"XHR Response Source #1\", () => {\n    xhrResponseSource((xhr) => {\n      if (!xhr?.responseText) {\n        return;\n      }\n\n      let transaction;\n      try {\n        const parsedData = JSON.parse(xhr.responseText);\n        // Verify parsed data is actually an object\n        if (!parsedData || typeof parsedData !== \"object\") {\n          return;\n        }\n        transaction = parsedData;\n      } catch (e) {\n        // Silent fail if JSON parsing fails\n        return;\n      }\n\n      const products = transaction?.lineItems?.physicalItems;\n      const getLatestOrder = localStorage.getItem(\"latestOrder\");\n\n      if (!transaction?.orderId) return;\n      if (transaction?.status !== \"AWAITING_FULFILLMENT\") return;\n      if (getLatestOrder === transaction.orderId.toString()) return;\n\n      try {\n        observable.notify({\n          transactionEvent: {\n            id: transaction.orderId.toString(),\n            total: parseFloat(transaction.orderAmount),\n            tax: parseFloat(transaction.taxTotal) || 0,\n            shipping: parseFloat(transaction.shippingCostTotal) || 0,\n            city: (transaction?.billingAddress?.city || \"N/A\").toString(),\n            state: (transaction?.billingAddress?.stateOrProvinceCode || \"N/A\").toString(),\n            country: (transaction?.billingAddress?.countryCode || \"N/A\").toString(),\n            currency: \"USD\",\n            items:\n              products?.map((product) => {\n                const { sku, name, listPrice, quantity } = product;\n                return {\n                  orderId: transaction.orderId.toString(),\n                  sku: sku?.toString() || \"N/A\",\n                  name: (name || \"N/A\").toString(),\n                  category: \"N/A\",\n                  unitPrice: parseFloat(listPrice || 0),\n                  quantity: parseInt(quantity || 1),\n                  currency: \"USD\",\n                } as TransactionCartItem;\n              }) || [],\n          },\n        });\n        localStorage.setItem(\"latestOrder\", transaction.orderId.toString());\n      } catch (e) {\n        // Silent fail for notification errors\n      }\n    });\n  });\n\n  handler.add(\"XHR Response Source #2\", () => {\n    xhrResponseSource((xhr) => {\n      let transaction;\n      try {\n        transaction = JSON.parse(xhr.responseText);\n      } catch (e) {\n        // Silent fail if JSON parsing fails\n        return;\n      }\n\n      if (transaction?.status && transaction?.orderAmount > 0) {\n        try {\n          isTrackerLoaded(() => {\n            observable.notify({\n              transactionEvent: {\n                id: transaction?.orderId?.toString() || \"\",\n                total: parseFloat(transaction?.orderAmount || 0),\n                tax: parseFloat(transaction?.taxTotal || 0),\n                shipping: parseFloat(transaction?.shippingCostTotal || 0),\n                city: (transaction?.billingAddress?.city || \"N/A\").toString(),\n                state: (transaction?.billingAddress?.stateOrProvinceCode || \"N/A\").toString(),\n                country: (transaction?.billingAddress?.countryCode || \"N/A\").toString(),\n                currency: \"USD\",\n                items:\n                  transaction?.lineItems?.physicalItems?.map((item) => ({\n                    orderId: transaction?.orderId?.toString() || \"\",\n                    sku: item?.sku?.toString() || \"N/A\",\n                    name: (item?.name || \"N/A\").toString(),\n                    category: \"N/A\",\n                    unitPrice: parseFloat(item?.listPrice || 0),\n                    quantity: parseInt(item?.quantity || 1),\n                    currency: \"USD\",\n                  })) || [],\n              },\n            });\n          });\n        } catch (error) {\n          // Silent fail for tracker errors\n        }\n      }\n    });\n  });\n\n  handler.add(\"Datalayer Source\", () => {\n    datalayerSource((data) => {\n      const purchase = data[2];\n      const items = purchase?.items || [];\n\n      if (data[1] === \"purchase\") {\n        observable.notify({\n          transactionEvent: {\n            id: purchase.transaction_id.toString(),\n            total: parseFloat(purchase.value || 0),\n            tax: parseFloat(purchase.tax || 0),\n            shipping: parseFloat(purchase.shipping || 0),\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"N/A\",\n            currency: \"USD\",\n            items: items.map((item) => ({\n                orderId: purchase.transaction_id.toString(),\n                sku: item.item_id.toString() || \"N/A\",\n                name: (item.item_name || \"N/A\").toString(),\n                category: item.item_category.toString() || \"N/A\",\n                unitPrice: parseFloat(item.price || 0),\n                quantity: parseInt(item.quantity || 1),\n                currency: \"USD\",\n              })),\n          },\n        });\n      }\n    });\n  });\n\n  handler.execute();\n};\n\nexport default bigcommerceDataSource;\n","export const isTrackerLoaded = (callback: () => void): void => {\n  if (window.tracker) {\n    callback();\n  } else {\n    let trackerLoaded = false;\n    const intervalId = setInterval(() => {\n      if (window.tracker && !trackerLoaded) {\n        trackerLoaded = true;\n        clearInterval(intervalId);\n        callback();\n      }\n    }, 100);\n  }\n};\n","import logger from \"src/shared/logger\";\nimport observable from \"./create-events-observable\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\ntype HandlerFunction = () => void;\n\ninterface AdapterHandler {\n  add: (name: string, fn: HandlerFunction) => void;\n  execute: () => void;\n}\n\nexport const createAdapterHandler = (snowplow: SnowplowTracker) => {\n  const snowplowContext = snowplow.context.appId;\n  let successLogged = false;\n  const fns: Array<{ name: string; fn: HandlerFunction }> = [];\n\n  function isUnique(name: string) {\n    return fns.findIndex((fn) => fn.name === name) === -1;\n  }\n\n  return {\n    add: (name: string, fn: HandlerFunction) => {\n      logger.info(`Adding ${name} to the adapter handler...`);\n      fns.push({ name, fn });\n    },\n    execute: () => {\n      logger.info(`Executing adapter handler...`);\n\n      for (const { name, fn } of fns) {\n        let success = false;\n        observable.subscribe((event) => {\n          if (event.transactionEvent) success = true;\n        });\n\n        try {\n          logger.info(`Attempting transaction with ${name}`);\n          fn();\n\n          if (success) {\n            successLogged = true;\n            logger.info(`Transaction successful with ${name}`);\n            return;\n          }\n        } catch (error) {\n          logger.error(`Transaction Failed with ${name}`, error);\n        }\n      }\n\n\n      if (!successLogged) {\n        logger.error(\"All transaction attempts failed for the adapter.\");\n      }\n    },\n  } as AdapterHandler;\n};\n\nexport const multiAdapterHandler = (() => {\n  let instance: ReturnType<typeof createAdapterHandler> | null = null;\n  return (snowplow: SnowplowTracker) => {\n    if (!instance) {\n      instance = createAdapterHandler(snowplow);\n    }\n    return instance;\n  };\n})();\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$e98fc9ad2abcf755$export$2e2bcd8739ae039","$2hYdk","$kDidw","$eU8cG","$3tZSl","$lSX0J","snowplow","handler","multiAdapterHandler","add","xhrResponseSource","xhr","_transaction_lineItems","_transaction_billingAddress","_transaction_billingAddress1","_transaction_billingAddress2","transaction","responseText","parsedData","JSON","parse","products","lineItems","physicalItems","getLatestOrder","localStorage","getItem","orderId","status","toString","default","notify","transactionEvent","id","total","parseFloat","orderAmount","tax","taxTotal","shipping","shippingCostTotal","city","billingAddress","state","stateOrProvinceCode","country","countryCode","currency","items","map","product","sku","name","listPrice","quantity","category","unitPrice","parseInt","setItem","isTrackerLoaded","_transaction_orderId","_transaction_lineItems_physicalItems","item","_item_sku","error","datalayerSource","data","purchase","transaction_id","value","item_id","item_name","item_category","price","execute","$d28923ed48da6cba$export$ab4cf8abbc961f2a","callback","tracker","trackerLoaded","intervalId","setInterval","clearInterval","instance","$126ed817d3cdab1d$export$606da16facbf2a29","$lwczO","$126ed817d3cdab1d$export$a2b49bbac3f322","context","appId","successLogged","fns","fn","info","push","success","subscribe","event"],"version":3,"file":"bigcommerce.9941478e.js.map"}