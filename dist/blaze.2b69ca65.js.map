{"mappings":"A,I,E,A,C,E,C,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SCqDA,EAjDwB,KAEhB,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,AAAC,IACf,GAAI,CACA,IAAM,EAAU,KAAK,KAAK,CAAC,EAAI,YAAY,EAC3C,GAAI,AAAsB,WAAtB,EAAQ,IAAI,CAAC,IAAI,CAAe,CAEhC,IAAM,EAAc,EAAQ,IAAI,CAAC,UAAU,CAErC,EAAU,AAAA,CAAA,EAAY,KAAK,CAAC,MAAM,CAAG,GAAA,EAAK,QAAQ,GAClD,EAAO,AAAA,CAAA,EAAY,SAAS,CAAC,MAAM,CAAG,GAAA,EAAK,QAAQ,GACnD,EAAW,EAAQ,QAAQ,CAC3B,EAAU,EAAY,gBAAgB,CAE5C,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CACd,iBAAkB,CACd,GAAI,EAAY,YAAY,CAAC,QAAQ,GACrC,MAAO,WAAW,IAAW,EAC7B,IAAK,WAAW,IAAQ,EACxB,SAAU,EACV,KAAO,AAAA,CAAA,EAAQ,IAAI,EAAI,KAAA,EAAO,QAAQ,GACtC,MAAQ,AAAA,CAAA,EAAQ,KAAK,EAAI,KAAA,EAAO,QAAQ,GACxC,QAAU,AAAA,CAAA,EAAQ,OAAO,EAAI,KAAA,EAAO,QAAQ,GAC5C,SAAU,MACV,MAAO,EACF,MAAM,CAAC,AAAC,GAAY,AAAiB,gBAAjB,EAAQ,IAAI,EAChC,GAAG,CAAC,AAAC,IACF,IAAM,EAAQ,EAAQ,UAAU,CAAC,WAAW,CAAC,MAAM,CACnD,MAAO,CACH,QAAS,EAAY,YAAY,CAAC,QAAQ,GAC1C,IAAK,EAAQ,EAAE,CAAC,QAAQ,GACxB,KAAM,MACN,SAAU,MACV,UAAW,EAAQ,KAAO,EAC1B,SAAU,SAAS,EAAQ,UAAU,CAAC,QAAQ,EAAI,GAClD,SAAU,KACd,CACJ,EACR,CACJ,EACJ,CACJ,CACA,MAAO,EAAO,CAAE,CACpB,EAIR,C","sources":["<anon>","src/shared/environment-data-sources/blaze.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2pCXW\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $826a1d6d98b70276$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $eU8cG = parcelRequire(\"eU8cG\");\nconst $826a1d6d98b70276$var$blazeDataSource = ()=>{\n    const runBlaze = ()=>{\n        (0, $eU8cG.xhrResponseSource)((xhr)=>{\n            try {\n                const getData = JSON.parse(xhr.responseText);\n                if (getData.data.type === \"orders\") {\n                    const transaction = getData.data.attributes;\n                    const amount = (transaction.total.amount / 100).toString();\n                    const tax = (transaction.tax_total.amount / 100).toString();\n                    const products = getData.included;\n                    const address = transaction.delivery_address;\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            id: transaction.order_number.toString(),\n                            total: parseFloat(amount) || 0,\n                            tax: parseFloat(tax) || 0,\n                            shipping: 0,\n                            city: (address.city || \"N/A\").toString(),\n                            state: (address.state || \"N/A\").toString(),\n                            country: (address.country || \"N/A\").toString(),\n                            currency: \"USD\",\n                            items: products.filter((product)=>product.type === \"order_items\").map((product)=>{\n                                const price = product.attributes.final_price.amount;\n                                return {\n                                    orderId: transaction.order_number.toString(),\n                                    sku: product.id.toString(),\n                                    name: \"N/A\",\n                                    category: \"N/A\",\n                                    unitPrice: price / 100 || 0,\n                                    quantity: parseInt(product.attributes.quantity || 1),\n                                    currency: \"USD\"\n                                };\n                            })\n                        }\n                    });\n                }\n            } catch (error) {}\n        });\n    };\n    runBlaze();\n};\nvar $826a1d6d98b70276$export$2e2bcd8739ae039 = $826a1d6d98b70276$var$blazeDataSource;\n\n});\n\n})();\n//# sourceMappingURL=blaze.2b69ca65.js.map\n","import observable from 'src/shared/utils/create-events-observable';\nimport { xhrResponseSource } from \"../sources/xhr-response-source\";\nimport { TransactionCartItem } from '../types';\n\nconst blazeDataSource = () => {\n    const runBlaze = () => {\n        xhrResponseSource((xhr) => {\n            try {\n                const getData = JSON.parse(xhr.responseText);\n                if (getData.data.type === \"orders\") {\n\n                    const transaction = getData.data.attributes;\n\n                    const amount = (transaction.total.amount / 100).toString();\n                    const tax = (transaction.tax_total.amount / 100).toString();\n                    const products = getData.included;\n                    const address = transaction.delivery_address;\n\n                    observable.notify({\n                        transactionEvent: {\n                            id: transaction.order_number.toString(),\n                            total: parseFloat(amount) || 0,\n                            tax: parseFloat(tax) || 0,\n                            shipping: 0,\n                            city: (address.city || \"N/A\").toString(),\n                            state: (address.state || \"N/A\").toString(),\n                            country: (address.country || \"N/A\").toString(),\n                            currency: \"USD\",\n                            items: products\n                                .filter((product) => product.type === \"order_items\")\n                                .map((product) => {\n                                    const price = product.attributes.final_price.amount;\n                                    return {\n                                        orderId: transaction.order_number.toString(),\n                                        sku: product.id.toString(),\n                                        name: \"N/A\",\n                                        category: \"N/A\",\n                                        unitPrice: price / 100 || 0,\n                                        quantity: parseInt(product.attributes.quantity || 1),\n                                        currency: \"USD\",\n                                    } as TransactionCartItem;\n                                }),\n                        },\n                    });\n                }\n            }\n            catch (error) { }\n        });\n    }\n\n    runBlaze();\n};\n\nexport default blazeDataSource;"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$826a1d6d98b70276$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$eU8cG","xhrResponseSource","xhr","getData","JSON","parse","responseText","data","type","transaction","attributes","amount","total","toString","tax","tax_total","products","included","address","delivery_address","default","notify","transactionEvent","id","order_number","parseFloat","shipping","city","state","country","currency","items","filter","product","map","price","final_price","orderId","sku","name","category","unitPrice","quantity","parseInt","error"],"version":3,"file":"blaze.2b69ca65.js.map"}