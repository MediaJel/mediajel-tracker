{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/foxy.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"01Tl8\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $fbc095f6c5fb8898$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\nconst $fbc095f6c5fb8898$var$foxyDataSource = ()=>{\n    const runFoxy = ()=>{\n        if (window.location.pathname.includes(\"/receipt\") || window.location.pathname.includes(\"/checkout\")) {\n            window.dataLayer = window.dataLayer || [];\n            for(let i = 0; i < window.dataLayer.length; i++){\n                const dataCart = window.dataLayer[i];\n                if (dataCart[\"0\"] === \"event\" && dataCart[\"1\"] === \"purchase\") {\n                    const transaction = dataCart[\"2\"];\n                    const products = transaction.items;\n                    const transaction_id = transaction.transaction_id;\n                    const valueTransaction = transaction.value || 0;\n                    const shippingFee = transaction.shipping || 0;\n                    const taxFee = transaction.tax || 0;\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            total: parseFloat(valueTransaction),\n                            id: transaction_id.toString(),\n                            tax: parseFloat(taxFee) || 0,\n                            shipping: parseFloat(shippingFee) || 0,\n                            city: \"N/A\",\n                            state: \"N/A\",\n                            country: \"N/A\",\n                            currency: \"USD\",\n                            items: products.map((product)=>{\n                                var item_id = product.item_id, item_name = product.item_name, item_category = product.item_category, price = product.price, quantity = product.quantity;\n                                return {\n                                    orderId: transaction_id.toString(),\n                                    sku: item_id.toString(),\n                                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                                    unitPrice: parseFloat(price || 0),\n                                    quantity: parseInt(quantity || 1),\n                                    currency: \"USD\"\n                                };\n                            })\n                        }\n                    });\n                    break;\n                }\n                if (dataCart.event === \"purchase\") {\n                    const transaction = dataCart.ecommerce;\n                    const products = transaction.items;\n                    const { transaction_id: transaction_id, value: value, tax: tax, shipping: shipping } = transaction;\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            total: parseFloat(value || 0) + parseFloat(tax || 0) + parseFloat(shipping || 0),\n                            id: transaction_id.toString(),\n                            tax: parseFloat(tax) || 0,\n                            shipping: parseFloat(shipping) || 0,\n                            city: \"N/A\",\n                            state: \"N/A\",\n                            country: \"N/A\",\n                            currency: \"USD\",\n                            items: products.map((product)=>{\n                                var item_id = product.item_id, item_name = product.item_name, item_category = product.item_category, price = product.price, quantity = product.quantity;\n                                return {\n                                    orderId: transaction_id.toString(),\n                                    sku: item_id.toString(),\n                                    name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                                    category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                                    unitPrice: parseFloat(price || 0),\n                                    quantity: parseInt(quantity || 1),\n                                    currency: \"USD\"\n                                };\n                            })\n                        }\n                    });\n                    break;\n                }\n            }\n        }\n    };\n    (0, $3tZSl.datalayerSource)(()=>{\n        runFoxy();\n    });\n};\nvar $fbc095f6c5fb8898$export$2e2bcd8739ae039 = $fbc095f6c5fb8898$var$foxyDataSource;\n\n});\n\n})();\n//# sourceMappingURL=foxy.ac24cda1.js.map\n","import observable from 'src/shared/utils/create-events-observable';\nimport { datalayerSource } from '../sources/google-datalayer-source';\nimport { TransactionCartItem } from '../types';\n\nconst foxyDataSource = () => {\n\n    const runFoxy = () => {\n        if (window.location.pathname.includes(\"/receipt\") || window.location.pathname.includes(\"/checkout\")) {\n            window.dataLayer = window.dataLayer || [];\n            for (let i = 0; i < window.dataLayer.length; i++) {\n                const dataCart = window.dataLayer[i];\n\n                if (dataCart[\"0\"] === \"event\" && dataCart[\"1\"] === \"purchase\") {\n                    const transaction = dataCart[\"2\"];\n                    const products = transaction.items;\n                    const transaction_id = transaction.transaction_id;\n                    const valueTransaction = transaction.value || 0;\n                    const shippingFee = transaction.shipping || 0;\n                    const taxFee = transaction.tax || 0;\n\n                    observable.notify({\n                        transactionEvent: {\n                            total: parseFloat(valueTransaction),\n                            id: transaction_id.toString(),\n                            tax: parseFloat(taxFee) || 0,\n                            shipping: parseFloat(shippingFee) || 0,\n                            city: \"N/A\",\n                            state: \"N/A\",\n                            country: \"N/A\",\n                            currency: \"USD\",\n                            items: products.map((product) => {\n                                var item_id = product.item_id,\n                                    item_name = product.item_name,\n                                    item_category = product.item_category,\n                                    price = product.price,\n                                    quantity = product.quantity;\n\n                                return {\n                                    orderId: transaction_id.toString(),\n                                    sku: item_id.toString(),\n                                    name: item_name?.toString() || \"N/A\",\n                                    category: item_category?.toString() || \"N/A\",\n                                    unitPrice: parseFloat(price || 0),\n                                    quantity: parseInt(quantity || 1),\n                                    currency: \"USD\",\n                                } as TransactionCartItem;\n                            }),\n                        }\n                    });\n\n                    break;\n                }\n                if (dataCart.event === \"purchase\") {\n                    const transaction = dataCart.ecommerce;\n                    const products = transaction.items;\n                    const { transaction_id, value, tax, shipping } = transaction;\n\n                    observable.notify({\n                        transactionEvent: {\n                            total: parseFloat(value || 0) + parseFloat(tax || 0) + parseFloat(shipping || 0),\n                            id: transaction_id.toString(),\n                            tax: parseFloat(tax) || 0,\n                            shipping: parseFloat(shipping) || 0,\n                            city: \"N/A\",\n                            state: \"N/A\",\n                            country: \"N/A\",\n                            currency: \"USD\",\n                            items: products.map((product) => {\n                                var item_id = product.item_id,\n                                    item_name = product.item_name,\n                                    item_category = product.item_category,\n                                    price = product.price,\n                                    quantity = product.quantity;\n\n                                return {\n                                    orderId: transaction_id.toString(),\n                                    sku: item_id.toString(),\n                                    name: item_name?.toString() || \"N/A\",\n                                    category: item_category?.toString() || \"N/A\",\n                                    unitPrice: parseFloat(price || 0),\n                                    quantity: parseInt(quantity || 1),\n                                    currency: \"USD\",\n                                } as TransactionCartItem;\n                            }),\n                        }\n                    });\n\n                    break;\n                }\n            }\n        }\n    }\n\n    datalayerSource(() => {\n        runFoxy();\n    });\n};\n\nexport default foxyDataSource;"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$fbc095f6c5fb8898$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$3tZSl","runFoxy","location","pathname","includes","dataLayer","i","length","dataCart","transaction","products","items","transaction_id","valueTransaction","value","shippingFee","shipping","taxFee","tax","default","notify","transactionEvent","total","parseFloat","id","toString","city","state","country","currency","map","product","item_id","item_name","item_category","price","quantity","orderId","sku","name","category","unitPrice","parseInt","event","ecommerce","datalayerSource"],"version":3,"file":"foxy.ac24cda1.js.map"}