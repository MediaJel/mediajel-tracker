{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/jane.ts","src/shared/sources/post-message-source.ts","src/shared/utils/adapter-handler.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"d4u6f\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $ee17ad9b84c6dd35$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $5ayqG = parcelRequire(\"5ayqG\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $lSX0J = parcelRequire(\"lSX0J\");\n// TODO: Take a look at add to cart in Jane data source\nconst $ee17ad9b84c6dd35$var$janeDataSource = (snowplow)=>{\n    const handler = (0, $lSX0J.multiAdapterHandler)(snowplow);\n    handler.add(\"PostMessageSource\", ()=>{\n        (0, $5ayqG.postMessageSource)((event)=>{\n            const { payload: payload, messageType: messageType } = event.data;\n            if (!payload || messageType !== \"analyticsEvent\") return;\n            if (payload.name === \"cartItemAdd\") {\n                const { product: product, productId: productId } = payload.properties;\n            //! TODO: Fix this since it's not working\n            // addToCartEvent({\n            //   sku: productId.toString(),\n            //   name: (product.name || \"N/A\").toString(),\n            //   category: (product.category || \"N/A\").toString(),\n            //   unitPrice: parseFloat(product.price || 0),\n            //   quantity: parseInt(product.quantity || 1),\n            //   currency: \"USD\",\n            // });\n            }\n            if (payload.name === \"cartItemRemoval\") {\n                const { productId: productId } = payload.properties;\n                // Hardcoded because most fields are empty\n                (0, $2hYdk.default).notify({\n                    removeFromCartEvent: {\n                        sku: productId.toString(),\n                        name: \"N/A\",\n                        category: \"N/A\",\n                        unitPrice: 0,\n                        quantity: 1,\n                        currency: \"USD\"\n                    }\n                });\n            }\n            if (payload.name === \"checkout\") try {\n                const { customerEmail: customerEmail, products: products, cartId: cartId, estimatedTotal: estimatedTotal, deliveryFee: deliveryFee, deliveryAddress: deliveryAddress = {}, salesTax: salesTax, storeTax: storeTax } = payload.properties;\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        userId: customerEmail,\n                        id: cartId.toString(),\n                        total: parseFloat(estimatedTotal),\n                        tax: parseFloat(salesTax + storeTax || 0),\n                        shipping: parseFloat(deliveryFee || 0),\n                        city: ((deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.city) || \"N/A\").toString(),\n                        state: ((deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.state_code) || \"N/A\").toString(),\n                        country: ((deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.country_code) || \"N/A\").toString(),\n                        currency: \"USD\",\n                        items: products.map((product)=>{\n                            const { product_id: product_id, name: name, category: category, unit_price: unit_price, count: count } = product;\n                            return {\n                                orderId: cartId.toString(),\n                                sku: product_id.toString(),\n                                name: (name || \"N/A\").toString(),\n                                category: (category || \"N/A\").toString(),\n                                unitPrice: parseFloat(unit_price || 0),\n                                quantity: parseInt(count || 1),\n                                currency: \"USD\"\n                            };\n                        })\n                    }\n                });\n            } catch (error) {\n            // window.tracker(\"trackError\", JSON.stringify(error), \"JANE\");\n            }\n        });\n    });\n    handler.add(\"DataLayerSource\", ()=>{\n        (0, $3tZSl.datalayerSource)((data)=>{\n            var _data_ecommerce;\n            const purchase = (_data_ecommerce = data.ecommerce) === null || _data_ecommerce === void 0 ? void 0 : _data_ecommerce.purchase;\n            const products = (purchase === null || purchase === void 0 ? void 0 : purchase.products) || [];\n            const event = data.event;\n            // No add to cart event found on the datalayer\n            if (event === \"ihj_purchase\") (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    userId: purchase.customerEmail,\n                    id: purchase.transaction_id.toString(),\n                    total: parseFloat(purchase.value),\n                    tax: 0,\n                    shipping: 0,\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"N/A\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        const { name: name, category: category, price: price, quantity: quantity } = product;\n                        return {\n                            orderId: purchase.transaction_id.toString(),\n                            sku: \"N/A\",\n                            name: (name || \"N/A\").toString(),\n                            category: (category || \"N/A\").toString(),\n                            unitPrice: parseFloat(price || 0),\n                            quantity: parseInt(quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        });\n    });\n    handler.execute();\n};\nvar $ee17ad9b84c6dd35$export$2e2bcd8739ae039 = $ee17ad9b84c6dd35$var$janeDataSource;\n\n});\nparcelRegister(\"5ayqG\", function(module, exports) {\n\n$parcel$export(module.exports, \"postMessageSource\", function () { return $5b9746592ec0dabd$export$653284ea2e114aa2; });\nconst $5b9746592ec0dabd$export$653284ea2e114aa2 = (callback)=>{\n    window.addEventListener(\"message\", callback, false);\n};\n\n});\n\nparcelRegister(\"lSX0J\", function(module, exports) {\n\n$parcel$export(module.exports, \"multiAdapterHandler\", function () { return $126ed817d3cdab1d$export$606da16facbf2a29; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $126ed817d3cdab1d$export$a2b49bbac3f322 = (snowplow)=>{\n    const snowplowContext = snowplow.context.appId;\n    let successLogged = false;\n    const fns = [];\n    function isUnique(name) {\n        return fns.findIndex((fn)=>fn.name === name) === -1;\n    }\n    return {\n        add: (name, fn)=>{\n            (0, $lwczO.default).info(`Adding ${name} to the adapter handler...`);\n            fns.push({\n                name: name,\n                fn: fn\n            });\n        },\n        execute: ()=>{\n            (0, $lwczO.default).info(`Executing adapter handler...`);\n            for (const { name: name, fn: fn } of fns){\n                let success = false;\n                (0, $2hYdk.default).subscribe((event)=>{\n                    if (event.transactionEvent) success = true;\n                });\n                try {\n                    (0, $lwczO.default).info(`Attempting transaction with ${name}`);\n                    fn();\n                    if (success) {\n                        successLogged = true;\n                        (0, $lwczO.default).info(`Transaction successful with ${name}`);\n                        return;\n                    }\n                } catch (error) {\n                    (0, $lwczO.default).error(`Transaction Failed with ${name}`, error);\n                }\n            }\n            if (!successLogged) (0, $lwczO.default).error(\"All transaction attempts failed for the adapter.\");\n        }\n    };\n};\nconst $126ed817d3cdab1d$export$606da16facbf2a29 = (()=>{\n    let instance = null;\n    return (snowplow)=>{\n        if (!instance) instance = $126ed817d3cdab1d$export$a2b49bbac3f322(snowplow);\n        return instance;\n    };\n})();\n\n});\n\n\n})();\n//# sourceMappingURL=jane.a96e6594.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { postMessageSource } from \"../sources/post-message-source\";\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { multiAdapterHandler } from \"../utils/adapter-handler\"; \nimport { TransactionCartItem } from \"../types\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\n\n// TODO: Take a look at add to cart in Jane data source\nconst janeDataSource = (snowplow: SnowplowTracker) => {\n  const handler = multiAdapterHandler(snowplow);\n\n  handler.add(\"PostMessageSource\", () => {\n    postMessageSource((event: MessageEvent<any>) => {\n      const { payload, messageType } = event.data;\n  \n      if (!payload || messageType !== \"analyticsEvent\") {\n        return;\n      }\n      if (payload.name === \"cartItemAdd\") {\n        const { product, productId } = payload.properties;\n  \n        //! TODO: Fix this since it's not working\n        // addToCartEvent({\n        //   sku: productId.toString(),\n        //   name: (product.name || \"N/A\").toString(),\n        //   category: (product.category || \"N/A\").toString(),\n        //   unitPrice: parseFloat(product.price || 0),\n        //   quantity: parseInt(product.quantity || 1),\n        //   currency: \"USD\",\n        // });\n      }\n  \n      if (payload.name === \"cartItemRemoval\") {\n        const { productId } = payload.properties;\n  \n        // Hardcoded because most fields are empty\n        observable.notify({\n          removeFromCartEvent: {\n            sku: productId.toString(),\n            name: \"N/A\",\n            category: \"N/A\",\n            unitPrice: 0,\n            quantity: 1,\n            currency: \"USD\",\n          },\n        });\n      }\n      if (payload.name === \"checkout\") {\n        try {\n          const {\n            customerEmail, // to implement\n            products,\n            cartId,\n            estimatedTotal,\n            deliveryFee,\n            deliveryAddress = {},\n            salesTax,\n            storeTax,\n          } = payload.properties;\n  \n          observable.notify({\n            transactionEvent: {\n              userId: customerEmail,\n              id: cartId.toString(),\n              total: parseFloat(estimatedTotal),\n              tax: parseFloat(salesTax + storeTax || 0),\n              shipping: parseFloat(deliveryFee || 0),\n              city: (deliveryAddress?.city || \"N/A\").toString(),\n              state: (deliveryAddress?.state_code || \"N/A\").toString(),\n              country: (deliveryAddress?.country_code || \"N/A\").toString(),\n              currency: \"USD\",\n              items: products.map((product) => {\n                const { product_id, name, category, unit_price, count } = product;\n                return {\n                  orderId: cartId.toString(),\n                  sku: product_id.toString(),\n                  name: (name || \"N/A\").toString(),\n                  category: (category || \"N/A\").toString(),\n                  unitPrice: parseFloat(unit_price || 0),\n                  quantity: parseInt(count || 1),\n                  currency: \"USD\",\n                } as TransactionCartItem;\n              }),\n            },\n          });\n        } catch (error) {\n          // window.tracker(\"trackError\", JSON.stringify(error), \"JANE\");\n        }\n      }\n    });\n  });\n\n  handler.add(\"DataLayerSource\", () => {\n    datalayerSource((data) => {\n      const purchase = data.ecommerce?.purchase;\n      const products = purchase?.products || [];\n      const event = data.event;\n\n      // No add to cart event found on the datalayer\n      if (event === \"ihj_purchase\") {\n        observable.notify({\n          transactionEvent: {userId: purchase.customerEmail,\n            id: purchase.transaction_id.toString(),\n            total: parseFloat(purchase.value),\n            tax: 0,\n            shipping: 0,\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"N/A\",\n            currency: \"USD\",\n            items: products.map((product) => {\n              const { name, category, price, quantity } = product;\n              return {\n                orderId: purchase.transaction_id.toString(),\n                sku: \"N/A\",\n                name: (name || \"N/A\").toString(),\n                category: (category || \"N/A\").toString(),\n                unitPrice: parseFloat(price || 0),\n                quantity: parseInt(quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      }\n    });\n  });\n\n  handler.execute();\n};\n\nexport default janeDataSource;\n","\nexport const postMessageSource = (callback: (event: MessageEvent<any>) => void): void => {\n    window.addEventListener(\"message\", callback, false)\n}","import logger from \"src/shared/logger\";\nimport observable from \"./create-events-observable\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\ntype HandlerFunction = () => void;\n\ninterface AdapterHandler {\n  add: (name: string, fn: HandlerFunction) => void;\n  execute: () => void;\n}\n\nexport const createAdapterHandler = (snowplow: SnowplowTracker) => {\n  const snowplowContext = snowplow.context.appId;\n  let successLogged = false;\n  const fns: Array<{ name: string; fn: HandlerFunction }> = [];\n\n  function isUnique(name: string) {\n    return fns.findIndex((fn) => fn.name === name) === -1;\n  }\n\n  return {\n    add: (name: string, fn: HandlerFunction) => {\n      logger.info(`Adding ${name} to the adapter handler...`);\n      fns.push({ name, fn });\n    },\n    execute: () => {\n      logger.info(`Executing adapter handler...`);\n\n      for (const { name, fn } of fns) {\n        let success = false;\n        observable.subscribe((event) => {\n          if (event.transactionEvent) success = true;\n        });\n\n        try {\n          logger.info(`Attempting transaction with ${name}`);\n          fn();\n\n          if (success) {\n            successLogged = true;\n            logger.info(`Transaction successful with ${name}`);\n            return;\n          }\n        } catch (error) {\n          logger.error(`Transaction Failed with ${name}`, error);\n        }\n      }\n\n\n      if (!successLogged) {\n        logger.error(\"All transaction attempts failed for the adapter.\");\n      }\n    },\n  } as AdapterHandler;\n};\n\nexport const multiAdapterHandler = (() => {\n  let instance: ReturnType<typeof createAdapterHandler> | null = null;\n  return (snowplow: SnowplowTracker) => {\n    if (!instance) {\n      instance = createAdapterHandler(snowplow);\n    }\n    return instance;\n  };\n})();\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$ee17ad9b84c6dd35$export$2e2bcd8739ae039","$2hYdk","$5ayqG","$3tZSl","$lSX0J","snowplow","handler","multiAdapterHandler","add","postMessageSource","event","payload","messageType","data","name","product","productId","properties","default","notify","removeFromCartEvent","sku","toString","category","unitPrice","quantity","currency","customerEmail","products","cartId","estimatedTotal","deliveryFee","deliveryAddress","salesTax","storeTax","transactionEvent","userId","id","total","parseFloat","tax","shipping","city","state","state_code","country","country_code","items","map","product_id","unit_price","count","orderId","parseInt","error","datalayerSource","_data_ecommerce","purchase","ecommerce","transaction_id","value","price","execute","$5b9746592ec0dabd$export$653284ea2e114aa2","callback","addEventListener","instance","$126ed817d3cdab1d$export$606da16facbf2a29","$lwczO","$126ed817d3cdab1d$export$a2b49bbac3f322","context","appId","successLogged","fns","fn","info","push","success","subscribe"],"version":3,"file":"jane.a96e6594.js.map"}