{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/dispense.ts","src/shared/sources/utils/trans-deduplicator.ts","src/shared/utils/adapter-handler.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"aPBGq\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $211848115f9acd3d$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $apXfG = parcelRequire(\"apXfG\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\n\nvar $ayme0 = parcelRequire(\"ayme0\");\n\nvar $lSX0J = parcelRequire(\"lSX0J\");\n// TODO: Remove Transaction Cache in favor of Higher Order Function extension\nconst $211848115f9acd3d$var$dispenseDataSource = (snowplow)=>{\n    const handler = (0, $lSX0J.multiAdapterHandler)(snowplow);\n    handler.add(\"DatalayerSource\", ()=>{\n        (0, $3tZSl.datalayerSource)((data)=>{\n            if (data[1] === \"purchase\") try {\n                const { transaction_id: transaction_id, tax: tax, value: value, items: items } = data[2];\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        total: parseFloat(value),\n                        id: transaction_id.toString(),\n                        tax: tax,\n                        shipping: 0,\n                        city: \"N/A\",\n                        state: \"N/A\",\n                        country: \"USA\",\n                        currency: \"USD\",\n                        items: items.map((item)=>{\n                            const { item_name: item_name, item_category: item_category, price: price, quantity: quantity } = item;\n                            return {\n                                orderId: transaction_id.toString(),\n                                sku: item_name.toString() || \"N/A\",\n                                name: (item_name === null || item_name === void 0 ? void 0 : item_name.toString()) || \"N/A\",\n                                category: (item_category === null || item_category === void 0 ? void 0 : item_category.toString()) || \"N/A\",\n                                unitPrice: parseFloat(price || 0),\n                                quantity: parseInt(quantity || 1),\n                                currency: \"USD\"\n                            };\n                        })\n                    }\n                });\n            } catch (error) {\n            // window.tracker('trackError', JSON.stringify(error), 'DISPENSE')\n            }\n        }, window.gtmDataLayer); // special case for dispense; window.dataLayer is renamed to window.gtmDataLayer\n    });\n    handler.add(\"FetchSource\", ()=>{\n        (0, $apXfG.fetchSource)((request)=>{}, (reponse, responseBody)=>{\n            window.addEventListener(\"beforeunload\", ()=>{\n                sessionStorage.removeItem(\"key\");\n            });\n            if (window.location.href.includes(\"/checkout-complete\")) try {\n                (0, $ayme0.runOncePerPageLoad)(()=>{\n                    (0, $2hYdk.default).notify({\n                        transactionEvent: {\n                            total: parseFloat(responseBody.total || 0),\n                            id: responseBody.id,\n                            tax: parseFloat(responseBody.totalTax || 0),\n                            shipping: 0,\n                            city: \"N/A\",\n                            state: \"N/A\",\n                            country: \"USA\",\n                            currency: \"USD\",\n                            items: responseBody.items.map((item)=>{\n                                return {\n                                    orderId: responseBody.id,\n                                    sku: item.product.sku || \"N/A\",\n                                    name: item.product.name || \"N/A\",\n                                    category: item.product.productCategoryName || \"N/A\",\n                                    unitPrice: parseFloat(item.price || 0),\n                                    quantity: parseInt(item.quantity || 1),\n                                    currency: \"USD\"\n                                };\n                            })\n                        }\n                    });\n                });\n            // success = true; // Allows the IF case to execute break on the switch case\n            } catch (error) {}\n        });\n    });\n    handler.execute();\n};\nvar $211848115f9acd3d$export$2e2bcd8739ae039 = $211848115f9acd3d$var$dispenseDataSource;\n\n});\nparcelRegister(\"ayme0\", function(module, exports) {\n\n$parcel$export(module.exports, \"runOncePerPageLoad\", function () { return $75e8097ffc9f48ee$export$d3ea25cf7c7cc463; });\n/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */ \nvar $lwczO = parcelRequire(\"lwczO\");\nconst $75e8097ffc9f48ee$export$d3ea25cf7c7cc463 = (callback)=>{\n    const key = \"key\";\n    if (!sessionStorage.getItem(key)) {\n        (0, $lwczO.default).info(\"First run in this session\");\n        callback();\n        sessionStorage.setItem(key, \"loaded\");\n    } else (0, $lwczO.default).info(\"Already run in this session\");\n    // Listen for the unload event to reset the sessionStorage item\n    window.addEventListener(\"beforeunload\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    // Listen for page changes to reset the sessionStorage item\n    window.addEventListener(\"popstate\", ()=>{\n        sessionStorage.removeItem(\"key\");\n    });\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    history.pushState = function(...args) {\n        originalPushState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n    history.replaceState = function(...args) {\n        originalReplaceState.apply(this, args);\n        sessionStorage.removeItem(\"key\");\n        window.dispatchEvent(new Event(\"popstate\"));\n    };\n};\n\n});\n\nparcelRegister(\"lSX0J\", function(module, exports) {\n\n$parcel$export(module.exports, \"multiAdapterHandler\", function () { return $126ed817d3cdab1d$export$606da16facbf2a29; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\nconst $126ed817d3cdab1d$export$a2b49bbac3f322 = (snowplow)=>{\n    const snowplowContext = snowplow.context.appId;\n    let successLogged = false;\n    const fns = [];\n    function isUnique(name) {\n        return fns.findIndex((fn)=>fn.name === name) === -1;\n    }\n    return {\n        add: (name, fn)=>{\n            (0, $lwczO.default).info(`Adding ${name} to the adapter handler...`);\n            fns.push({\n                name: name,\n                fn: fn\n            });\n        },\n        execute: ()=>{\n            (0, $lwczO.default).info(`Executing adapter handler...`);\n            for (const { name: name, fn: fn } of fns){\n                let success = false;\n                (0, $2hYdk.default).subscribe((event)=>{\n                    if (event.transactionEvent) success = true;\n                });\n                try {\n                    (0, $lwczO.default).info(`Attempting transaction with ${name}`);\n                    fn();\n                    if (success) {\n                        successLogged = true;\n                        (0, $lwczO.default).info(`Transaction successful with ${name}`);\n                        return;\n                    }\n                } catch (error) {\n                    (0, $lwczO.default).error(`Transaction Failed with ${name}`, error);\n                }\n            }\n            if (!successLogged) (0, $lwczO.default).error(\"All transaction attempts failed for the adapter.\");\n        }\n    };\n};\nconst $126ed817d3cdab1d$export$606da16facbf2a29 = (()=>{\n    let instance = null;\n    return (snowplow)=>{\n        if (!instance) instance = $126ed817d3cdab1d$export$a2b49bbac3f322(snowplow);\n        return instance;\n    };\n})();\n\n});\n\n\n})();\n//# sourceMappingURL=dispense.8a90a0e3.js.map\n","import logger from \"src/shared/logger\";\nimport observable from \"src/shared/utils/create-events-observable\";\n\nimport { fetchSource } from \"../sources/fetch-source\";\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { runOncePerPageLoad } from \"../sources/utils/trans-deduplicator\";\nimport { TransactionCartItem } from \"../types\";\nimport { multiAdapterHandler } from \"../utils/adapter-handler\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\n// TODO: Remove Transaction Cache in favor of Higher Order Function extension\n\nconst dispenseDataSource = (snowplow: SnowplowTracker) => {\n  const handler = multiAdapterHandler(snowplow);\n\n  handler.add(\"DatalayerSource\", () => {\n    datalayerSource((data) => {\n      if (data[1] === \"purchase\") {\n        try {\n          const { transaction_id, tax, value, items } = data[2];\n\n          observable.notify({\n            transactionEvent: {\n              total: parseFloat(value),\n              id: transaction_id.toString(),\n              tax,\n              shipping: 0,\n              city: \"N/A\",\n              state: \"N/A\",\n              country: \"USA\",\n              currency: \"USD\",\n              items: items.map((item) => {\n                const { item_name, item_category, price, quantity } = item;\n\n                return {\n                  orderId: transaction_id.toString(),\n                  sku: item_name.toString() || \"N/A\",\n                  name: item_name?.toString() || \"N/A\",\n                  category: item_category?.toString() || \"N/A\",\n                  unitPrice: parseFloat(price || 0),\n                  quantity: parseInt(quantity || 1),\n                  currency: \"USD\",\n                } as TransactionCartItem;\n              }),\n            },\n          });\n        } catch (error) {\n          // window.tracker('trackError', JSON.stringify(error), 'DISPENSE')\n        }\n      }\n    }, window.gtmDataLayer); // special case for dispense; window.dataLayer is renamed to window.gtmDataLayer\n  });\n\n  handler.add(\"FetchSource\", () => {\n    fetchSource(\n      (request) => {},\n      (reponse, responseBody) => {\n        window.addEventListener(\"beforeunload\", () => {\n          sessionStorage.removeItem(\"key\");\n        });\n\n        if (window.location.href.includes(\"/checkout-complete\")) {\n          try {\n            runOncePerPageLoad(() => {\n              observable.notify({\n                transactionEvent: {\n                  total: parseFloat(responseBody.total || 0),\n                  id: responseBody.id,\n                  tax: parseFloat(responseBody.totalTax || 0),\n                  shipping: 0,\n                  city: \"N/A\",\n                  state: \"N/A\",\n                  country: \"USA\",\n                  currency: \"USD\",\n                  items: responseBody.items.map((item) => {\n                    return {\n                      orderId: responseBody.id,\n                      sku: item.product.sku || \"N/A\",\n                      name: item.product.name || \"N/A\",\n                      category: item.product.productCategoryName || \"N/A\",\n                      unitPrice: parseFloat(item.price || 0),\n                      quantity: parseInt(item.quantity || 1),\n                      currency: \"USD\",\n                    } as TransactionCartItem;\n                  }),\n                },\n              });\n            });\n\n            // success = true; // Allows the IF case to execute break on the switch case\n          } catch (error) {}\n        }\n      },\n    );\n  });\n\n  handler.execute();\n};\n\nexport default dispenseDataSource;\n","/*\n *   Saves a key on the session storage to indicate that the tracker has been\n *   loaded once, this will prevent multiple triggering of the code\n *   even without reloading the page. And when the user reloads the page,\n *   the key will be removed and placed again.\n */\n\nimport logger from 'src/shared/logger';\n\nexport const runOncePerPageLoad = (callback) => {\n  const key = \"key\";\n\n  if (!sessionStorage.getItem(key)) {\n    logger.info(\"First run in this session\");\n    callback();\n    sessionStorage.setItem(key, \"loaded\");\n  } else {\n    logger.info(\"Already run in this session\");\n  }\n\n   // Listen for the unload event to reset the sessionStorage item\nwindow.addEventListener(\"beforeunload\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\n// Listen for page changes to reset the sessionStorage item\nwindow.addEventListener(\"popstate\", () => {\n  sessionStorage.removeItem(\"key\");\n});\n\nconst originalPushState = history.pushState;\nconst originalReplaceState = history.replaceState;\n\nhistory.pushState = function (...args) {\n  originalPushState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n\nhistory.replaceState = function (...args) {\n  originalReplaceState.apply(this, args);\n  sessionStorage.removeItem(\"key\");\n  window.dispatchEvent(new Event(\"popstate\"));\n};\n};","import logger from \"src/shared/logger\";\nimport observable from \"./create-events-observable\";\nimport { SnowplowTracker } from \"../snowplow/types\";\n\ntype HandlerFunction = () => void;\n\ninterface AdapterHandler {\n  add: (name: string, fn: HandlerFunction) => void;\n  execute: () => void;\n}\n\nexport const createAdapterHandler = (snowplow: SnowplowTracker) => {\n  const snowplowContext = snowplow.context.appId;\n  let successLogged = false;\n  const fns: Array<{ name: string; fn: HandlerFunction }> = [];\n\n  function isUnique(name: string) {\n    return fns.findIndex((fn) => fn.name === name) === -1;\n  }\n\n  return {\n    add: (name: string, fn: HandlerFunction) => {\n      logger.info(`Adding ${name} to the adapter handler...`);\n      fns.push({ name, fn });\n    },\n    execute: () => {\n      logger.info(`Executing adapter handler...`);\n\n      for (const { name, fn } of fns) {\n        let success = false;\n        observable.subscribe((event) => {\n          if (event.transactionEvent) success = true;\n        });\n\n        try {\n          logger.info(`Attempting transaction with ${name}`);\n          fn();\n\n          if (success) {\n            successLogged = true;\n            logger.info(`Transaction successful with ${name}`);\n            return;\n          }\n        } catch (error) {\n          logger.error(`Transaction Failed with ${name}`, error);\n        }\n      }\n\n\n      if (!successLogged) {\n        logger.error(\"All transaction attempts failed for the adapter.\");\n      }\n    },\n  } as AdapterHandler;\n};\n\nexport const multiAdapterHandler = (() => {\n  let instance: ReturnType<typeof createAdapterHandler> | null = null;\n  return (snowplow: SnowplowTracker) => {\n    if (!instance) {\n      instance = createAdapterHandler(snowplow);\n    }\n    return instance;\n  };\n})();\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$211848115f9acd3d$export$2e2bcd8739ae039","$2hYdk","$apXfG","$3tZSl","$ayme0","$lSX0J","snowplow","handler","multiAdapterHandler","add","datalayerSource","data","transaction_id","tax","value","items","default","notify","transactionEvent","total","parseFloat","id","toString","shipping","city","state","country","currency","map","item","item_name","item_category","price","quantity","orderId","sku","name","category","unitPrice","parseInt","error","gtmDataLayer","fetchSource","request","reponse","responseBody","addEventListener","sessionStorage","removeItem","location","href","includes","runOncePerPageLoad","totalTax","product","productCategoryName","execute","$75e8097ffc9f48ee$export$d3ea25cf7c7cc463","$lwczO","callback","getItem","info","setItem","originalPushState","history","pushState","originalReplaceState","replaceState","args","apply","dispatchEvent","Event","instance","$126ed817d3cdab1d$export$606da16facbf2a29","$126ed817d3cdab1d$export$a2b49bbac3f322","context","appId","successLogged","fns","fn","push","success","subscribe","event"],"version":3,"file":"dispense.8a90a0e3.js.map"}