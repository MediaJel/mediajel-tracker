{"mappings":"A,I,E,A,C,E,C,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SC+EA,EA1EyB,KACvB,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,AAAC,IACf,GAAI,AAAe,kBAAf,EAAK,KAAK,CAAsB,CAElC,GAAM,CAAA,IAAE,CAAG,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAE,CAD7B,EAGjB,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,eAAgB,CACd,IAAK,EAAI,QAAQ,GACjB,KAAO,AAAA,CAAA,GAAQ,KAAA,EAAO,QAAQ,GAC9B,SAAW,AAAA,CAAA,GAAY,KAAA,EAAO,QAAQ,GACtC,UAAW,WAAW,GAAS,GAC/B,SAAU,SAAS,GAAY,GAC/B,SAAU,KACZ,CACF,EACF,CAEA,GAAI,AAAe,oBAAf,EAAK,KAAK,CAAwB,CAEpC,GAAM,CAAA,IAAE,CAAG,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAE,CAD7B,EAGjB,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,oBAAqB,CACnB,IAAK,EAAI,QAAQ,GACjB,KAAO,AAAA,CAAA,GAAQ,KAAA,EAAO,QAAQ,GAC9B,SAAW,AAAA,CAAA,GAAY,KAAA,EAAO,QAAQ,GACtC,UAAW,WAAW,GAAS,GAC/B,SAAU,SAAS,GAAY,GAC/B,SAAU,KACZ,CACF,EACF,CAEA,GAAI,AAAe,eAAf,EAAK,KAAK,CACZ,GAAI,CACF,IAAM,EAAiB,EAAK,QAAQ,CAC9B,EAAoB,EAAK,OAAO,CAChC,EAAkB,EAAK,GAAG,CAC1B,EAAuB,EAAK,QAAQ,CACpC,EAAW,EAAK,QAAQ,CAE9B,AAAA,CAAA,EAAA,EAAA,OAAS,AAAT,EAAW,MAAM,CAAC,CAChB,iBAAkB,CAChB,GAAI,EAAe,QAAQ,GAC3B,MAAO,WAAW,GAAqB,GACvC,IAAK,WAAW,GAAmB,GACnC,SAAU,WAAW,GAAwB,GAC7C,KAAM,MACN,MAAO,MACP,QAAS,MACT,SAAU,MACV,MAAO,EAAS,GAAG,CAAC,AAAC,IACnB,GAAM,CAAA,QAAE,CAAO,CAAA,UAAE,CAAS,CAAA,cAAE,CAAa,CAAA,MAAE,CAAK,CAAA,SAAE,CAAQ,CAAE,CAAG,EAC/D,MAAO,CACL,QAAS,EAAe,QAAQ,GAChC,UAAW,EAAQ,QAAQ,GAC3B,IAAK,EAAQ,QAAQ,GACrB,KAAO,AAAA,CAAA,GAAa,KAAA,EAAO,QAAQ,GACnC,SAAW,AAAA,CAAA,GAAiB,KAAA,EAAO,QAAQ,GAC3C,UAAW,WAAW,GAAS,GAC/B,SAAU,SAAS,GAAY,GAC/B,SAAU,KACZ,CACF,EACF,CACF,EACF,CAAE,MAAO,EAAO,CAEhB,CAEJ,EACF,C","sources":["<anon>","src/shared/environment-data-sources/grassdoor.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1oyy4\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $e7bc3336db6df5a3$export$2e2bcd8739ae039; });\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $3tZSl = parcelRequire(\"3tZSl\");\nconst $e7bc3336db6df5a3$var$grassDoorTracker = ()=>{\n    (0, $3tZSl.datalayerSource)((data)=>{\n        if (data.event === \"Product Added\") {\n            const products = data;\n            const { sku: sku, name: name, price: price, quantity: quantity, category: category } = products;\n            (0, $2hYdk.default).notify({\n                addToCartEvent: {\n                    sku: sku.toString(),\n                    name: (name || \"N/A\").toString(),\n                    category: (category || \"N/A\").toString(),\n                    unitPrice: parseFloat(price || 0),\n                    quantity: parseInt(quantity || 1),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (data.event === \"Product Removed\") {\n            const products = data;\n            const { sku: sku, name: name, price: price, quantity: quantity, category: category } = products;\n            (0, $2hYdk.default).notify({\n                removeFromCartEvent: {\n                    sku: sku.toString(),\n                    name: (name || \"N/A\").toString(),\n                    category: (category || \"N/A\").toString(),\n                    unitPrice: parseFloat(price || 0),\n                    quantity: parseInt(quantity || 1),\n                    currency: \"USD\"\n                }\n            });\n        }\n        if (data.event === \"Order Made\") try {\n            const transaction_id = data.order_id;\n            const transaction_total = data.revenue;\n            const transaction_tax = data.tax;\n            const transaction_shipping = data.shipping;\n            const products = data.products;\n            (0, $2hYdk.default).notify({\n                transactionEvent: {\n                    id: transaction_id.toString(),\n                    total: parseFloat(transaction_total || 0),\n                    tax: parseFloat(transaction_tax || 0),\n                    shipping: parseFloat(transaction_shipping || 0),\n                    city: \"N/A\",\n                    state: \"N/A\",\n                    country: \"USA\",\n                    currency: \"USD\",\n                    items: products.map((product)=>{\n                        const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = product;\n                        return {\n                            orderId: transaction_id.toString(),\n                            productId: item_id.toString(),\n                            sku: item_id.toString(),\n                            name: (item_name || \"N/A\").toString(),\n                            category: (item_category || \"N/A\").toString(),\n                            unitPrice: parseFloat(price || 0),\n                            quantity: parseInt(quantity || 1),\n                            currency: \"USD\"\n                        };\n                    })\n                }\n            });\n        } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'GRASSDOOR');\n        }\n    });\n};\nvar $e7bc3336db6df5a3$export$2e2bcd8739ae039 = $e7bc3336db6df5a3$var$grassDoorTracker;\n\n});\n\n})();\n//# sourceMappingURL=grassdoor.69439c32.js.map\n","import observable from \"src/shared/utils/create-events-observable\";\n\nimport { datalayerSource } from \"../sources/google-datalayer-source\";\nimport { TransactionCartItem } from \"../types\";\n\nconst grassDoorTracker = () => {\n  datalayerSource((data: any): void => {\n    if (data.event === \"Product Added\") {\n      const products = data;\n      const { sku, name, price, quantity, category } = products;\n\n      observable.notify({\n        addToCartEvent: {\n          sku: sku.toString(),\n          name: (name || \"N/A\").toString(),\n          category: (category || \"N/A\").toString(),\n          unitPrice: parseFloat(price || 0),\n          quantity: parseInt(quantity || 1),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (data.event === \"Product Removed\") {\n      const products = data;\n      const { sku, name, price, quantity, category } = products;\n\n      observable.notify({\n        removeFromCartEvent: {\n          sku: sku.toString(),\n          name: (name || \"N/A\").toString(),\n          category: (category || \"N/A\").toString(),\n          unitPrice: parseFloat(price || 0),\n          quantity: parseInt(quantity || 1),\n          currency: \"USD\",\n        },\n      });\n    }\n\n    if (data.event === \"Order Made\") {\n      try {\n        const transaction_id = data.order_id;\n        const transaction_total = data.revenue;\n        const transaction_tax = data.tax;\n        const transaction_shipping = data.shipping;\n        const products = data.products;\n\n        observable.notify({\n          transactionEvent: {\n            id: transaction_id.toString(),\n            total: parseFloat(transaction_total || 0),\n            tax: parseFloat(transaction_tax || 0),\n            shipping: parseFloat(transaction_shipping || 0),\n            city: \"N/A\",\n            state: \"N/A\",\n            country: \"USA\",\n            currency: \"USD\",\n            items: products.map((product) => {\n              const { item_id, item_name, item_category, price, quantity } = product;\n              return {\n                orderId: transaction_id.toString(),\n                productId: item_id.toString(),\n                sku: item_id.toString(),\n                name: (item_name || \"N/A\").toString(),\n                category: (item_category || \"N/A\").toString(),\n                unitPrice: parseFloat(price || 0),\n                quantity: parseInt(quantity || 1),\n                currency: \"USD\",\n              } as TransactionCartItem;\n            }),\n          },\n        });\n      } catch (error) {\n        // window.tracker('trackError', JSON.stringify(error), 'GRASSDOOR');\n      }\n    }\n  });\n};\n\nexport default grassDoorTracker;\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","get","$e7bc3336db6df5a3$export$2e2bcd8739ae039","set","s","enumerable","configurable","$2hYdk","$3tZSl","datalayerSource","data","event","sku","name","price","quantity","category","default","notify","addToCartEvent","toString","unitPrice","parseFloat","parseInt","currency","removeFromCartEvent","transaction_id","order_id","transaction_total","revenue","transaction_tax","tax","transaction_shipping","shipping","products","transactionEvent","id","total","city","state","country","items","map","product","item_id","item_name","item_category","orderId","productId","error"],"version":3,"file":"grassdoor.69439c32.js.map"}