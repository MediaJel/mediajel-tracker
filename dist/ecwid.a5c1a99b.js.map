{"mappings":"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","sources":["<anon>","src/shared/environment-data-sources/ecwid.ts","src/shared/sources/utils/poll-for-element.ts","src/shared/utils/try-parse-json.ts"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire07df\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7XV9p\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $26a0839d97a94d46$export$2e2bcd8739ae039; });\n\nvar $lwczO = parcelRequire(\"lwczO\");\n\nvar $2hYdk = parcelRequire(\"2hYdk\");\n\nvar $gI1kx = parcelRequire(\"gI1kx\");\n\nvar $gDdCy = parcelRequire(\"gDdCy\");\n// TODO: Maybe remove the success = true; and the if (!success) block\nconst $26a0839d97a94d46$var$ecwidTracker = ()=>{\n    let success = false;\n    try {\n        if (!window.transactionOrder && !window.transactionItems) return;\n        const transaction = (0, $gDdCy.tryParseJSONObject)(window.transactionOrder);\n        const products = (0, $gDdCy.tryParseJSONObject)(window.transactionItems);\n        (0, $2hYdk.default).notify({\n            transactionEvent: {\n                id: transaction.id.toString(),\n                total: parseFloat(transaction.total),\n                tax: parseFloat(transaction.tax) || 0,\n                shipping: parseFloat(transaction.delivery_fee) || 0,\n                city: \"N/A\",\n                state: \"N/A\",\n                country: \"USA\",\n                currency: \"USD\",\n                items: products.map((product)=>{\n                    const { item_id: item_id, item_name: item_name, item_category: item_category, price: price, quantity: quantity } = product;\n                    return {\n                        orderId: transaction.id.toString(),\n                        productId: item_id.toString(),\n                        sku: item_id.toString(),\n                        name: (item_name || \"N/A\").toString(),\n                        category: (item_category || \"N/A\").toString(),\n                        unitPrice: parseFloat(price || 0),\n                        quantity: parseInt(quantity || 1),\n                        currency: \"USD\"\n                    };\n                })\n            }\n        });\n        success = true;\n    } catch (error) {\n        (0, $lwczO.default).info(\"trackError\", JSON.stringify(error), \"ECWID IMPLEMENTATION 1\");\n    }\n    // In the instance the above code doesn't work, the code below will execute since the if statement is true.\n    if (!success) try {\n        (0, $gI1kx.pollForElement)([\n            \".ec-confirmation__number.ec-header-h5\",\n            \".ec-confirmation__order-confirmation-total\",\n            \".ec-cart-item__title\",\n            \".ec-cart-item__count-inner\"\n        ], ()=>{\n            if (window.location.href.includes(\"/orderConfirmation\") || window.location.href.includes(\"/order-confirmation\")) {\n                const idElement = document.querySelector(\".ec-confirmation__number.ec-header-h5\");\n                const totalElement = document.querySelector(\".ec-confirmation__order-confirmation-total\");\n                const nameElement = document.querySelector(\".ec-cart-item__title\");\n                const quantityElement = document.querySelector(\".ec-cart-item__count-inner\");\n                var id = idElement.textContent;\n                var total = totalElement.textContent.replace(\"$\", \"\");\n                var name = nameElement.textContent;\n                var quantity = quantityElement.textContent.replace(\"\\xd7 \", \"\");\n                const products = [\n                    {\n                        orderId: id.toString(),\n                        sku: \"N/A\",\n                        name: (name || \"N/A\").toString(),\n                        category: \"N/A\",\n                        unitPrice: parseFloat(total) || 0,\n                        quantity: parseInt(quantity) || 1,\n                        currency: \"USD\"\n                    }\n                ];\n                (0, $2hYdk.default).notify({\n                    transactionEvent: {\n                        id: id.toString(),\n                        total: parseFloat(total),\n                        tax: 0,\n                        shipping: 0,\n                        city: \"N/A\",\n                        state: \"N/A\",\n                        country: \"USA\",\n                        currency: \"USD\",\n                        items: products\n                    }\n                });\n            }\n        });\n    } catch (error) {\n        (0, $lwczO.default).info(\"trackError\", JSON.stringify(error), \"ECWID IMPLEMENTATION 2\");\n    }\n};\nvar $26a0839d97a94d46$export$2e2bcd8739ae039 = $26a0839d97a94d46$var$ecwidTracker;\n\n});\nparcelRegister(\"gI1kx\", function(module, exports) {\n\n$parcel$export(module.exports, \"pollForElement\", function () { return $fedf0b5b30bf7cb9$export$7c481a487f148c99; });\n/*\n *   Waits for elements to be loaded in the DOM.\n *   It repeatedly checks if all the elements exist in the DOM.\n *   If all elements exist, it clears the interval and executes the provided callback function.\n */ const $fedf0b5b30bf7cb9$export$7c481a487f148c99 = (selectors, callback, interval = 100, timeout = 30000)=>{\n    const startTime = Date.now();\n    const poller = setInterval(()=>{\n        const elements = selectors.map((selector)=>{\n            const element = document.querySelector(selector);\n            return element !== null;\n        });\n        const isAllLoaded = elements.every(Boolean);\n        if (isAllLoaded) {\n            clearInterval(poller);\n            callback();\n        } else if (Date.now() - startTime >= timeout) clearInterval(poller);\n    }, interval);\n};\n\n});\n\nparcelRegister(\"gDdCy\", function(module, exports) {\n\n$parcel$export(module.exports, \"tryParseJSONObject\", function () { return $3314a60fcd51e41f$export$8b0f5bf83db88e; });\nconst $3314a60fcd51e41f$export$8b0f5bf83db88e = (event)=>{\n    try {\n        if (typeof event === \"object\") return event;\n        if (typeof event === \"string\") return JSON.parse(event);\n    } catch (e) {\n        console.error(\"Error parsing event:\", e);\n    }\n    return event;\n};\n\n});\n\n\n})();\n//# sourceMappingURL=ecwid.a5c1a99b.js.map\n","import logger from \"src/shared/logger\";\nimport observable from \"src/shared/utils/create-events-observable\";\n\nimport { pollForElement } from \"../sources/utils/poll-for-element\";\nimport { TransactionCartItem } from \"../types\";\nimport { tryParseJSONObject } from \"../utils/try-parse-json\";\n\n// TODO: Maybe remove the success = true; and the if (!success) block\nconst ecwidTracker = () => {\n  let success = false;\n\n  try {\n    if (!window.transactionOrder && !window.transactionItems) {\n      return;\n    }\n\n    const transaction = tryParseJSONObject(window.transactionOrder);\n    const products = tryParseJSONObject(window.transactionItems);\n\n    observable.notify({\n      transactionEvent: {\n        id: transaction.id.toString(),\n        total: parseFloat(transaction.total),\n        tax: parseFloat(transaction.tax) || 0,\n        shipping: parseFloat(transaction.delivery_fee) || 0,\n        city: \"N/A\",\n        state: \"N/A\",\n        country: \"USA\",\n        currency: \"USD\",\n        items: products.map((product) => {\n          const { item_id, item_name, item_category, price, quantity } = product;\n          return {\n            orderId: transaction.id.toString(),\n            productId: item_id.toString(),\n            sku: item_id.toString(),\n            name: (item_name || \"N/A\").toString(),\n            category: (item_category || \"N/A\").toString(),\n            unitPrice: parseFloat(price || 0),\n            quantity: parseInt(quantity || 1),\n            currency: \"USD\",\n          } as TransactionCartItem;\n        }),\n      },\n    });\n\n    success = true;\n  } catch (error) {\n    logger.info(\"trackError\", JSON.stringify(error), \"ECWID IMPLEMENTATION 1\");\n  }\n\n  // In the instance the above code doesn't work, the code below will execute since the if statement is true.\n\n  if (!success) {\n    try {\n      pollForElement(\n        [\n          \".ec-confirmation__number.ec-header-h5\",\n          \".ec-confirmation__order-confirmation-total\",\n          \".ec-cart-item__title\",\n          \".ec-cart-item__count-inner\",\n        ],\n        () => {\n          if (\n            window.location.href.includes(\"/orderConfirmation\") ||\n            window.location.href.includes(\"/order-confirmation\")\n          ) {\n            const idElement = document.querySelector(\".ec-confirmation__number.ec-header-h5\");\n            const totalElement = document.querySelector(\".ec-confirmation__order-confirmation-total\");\n            const nameElement = document.querySelector(\".ec-cart-item__title\");\n            const quantityElement = document.querySelector(\".ec-cart-item__count-inner\");\n\n            var id = idElement.textContent;\n            var total = totalElement.textContent.replace(\"$\", \"\");\n            var name = nameElement.textContent;\n            var quantity = quantityElement.textContent.replace(\"× \", \"\");\n\n            const products: TransactionCartItem[] = [\n              {\n                orderId: id.toString(),\n                sku: \"N/A\",\n                name: (name || \"N/A\").toString(),\n                category: \"N/A\",\n                unitPrice: parseFloat(total) || 0,\n                quantity: parseInt(quantity) || 1,\n                currency: \"USD\",\n              },\n            ];\n\n            observable.notify({\n              transactionEvent: {\n                id: id.toString(),\n                total: parseFloat(total),\n                tax: 0,\n                shipping: 0,\n                city: \"N/A\",\n                state: \"N/A\",\n                country: \"USA\",\n                currency: \"USD\",\n                items: products,\n              },\n            });\n          }\n        }\n      );\n    } catch (error) {\n      logger.info(\"trackError\", JSON.stringify(error), \"ECWID IMPLEMENTATION 2\");\n    }\n  }\n};\n\nexport default ecwidTracker;\n","/*\n *   Waits for elements to be loaded in the DOM.\n *   It repeatedly checks if all the elements exist in the DOM.\n *   If all elements exist, it clears the interval and executes the provided callback function.\n */\n\nexport const pollForElement = (\n  selectors: string[],\n  callback: () => void,\n  interval: number = 100,\n  timeout: number = 30000\n): void => {\n  const startTime = Date.now();\n\n  const poller = setInterval(() => {\n    const elements = selectors.map((selector: string) => {\n      const element = document.querySelector(selector);\n      return element !== null;\n    });\n\n    const isAllLoaded = elements.every(Boolean);\n\n    if (isAllLoaded) {\n      clearInterval(poller);\n      callback();\n    } else if (Date.now() - startTime >= timeout) {\n      clearInterval(poller);\n      //console.error(`Timeout reached: elements with selectors \"${selectors.join(\", \")}\" not found.`);\n    }\n  }, interval);\n};\n","export const tryParseJSONObject = (event: string | object): string | object | any => {\n  try {\n    if (typeof event === \"object\") {\n      return event;\n    }\n    if (typeof event === \"string\") {\n      return JSON.parse(event);\n    }\n  } catch (e) {\n    console.error(\"Error parsing event:\", e);\n  }\n\n  return event;\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$26a0839d97a94d46$export$2e2bcd8739ae039","$lwczO","$2hYdk","$gI1kx","$gDdCy","success","transactionOrder","transactionItems","transaction","tryParseJSONObject","products","default","notify","transactionEvent","id","toString","total","parseFloat","tax","shipping","delivery_fee","city","state","country","currency","items","map","product","item_id","item_name","item_category","price","quantity","orderId","productId","sku","name","category","unitPrice","parseInt","error","info","JSON","stringify","pollForElement","location","href","includes","idElement","document","querySelector","totalElement","nameElement","quantityElement","textContent","replace","$fedf0b5b30bf7cb9$export$7c481a487f148c99","selectors","callback","interval","timeout","startTime","Date","now","poller","setInterval","elements","selector","element","every","Boolean","clearInterval","$3314a60fcd51e41f$export$8b0f5bf83db88e","event","parse","console"],"version":3,"file":"ecwid.a5c1a99b.js.map"}